
ffr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001c12  00001ca6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800106  00800106  00001cac  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001c3  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008eb  00000000  00000000  00001eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003fc  00000000  00000000  000027da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000702  00000000  00000000  00002bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  000032d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e9  00000000  00000000  00003468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000564  00000000  00000000  00003751  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_7>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_14>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__c.1790>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1788>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e2 e1       	ldi	r30, 0x12	; 18
     17e:	fc e1       	ldi	r31, 0x1C	; 28
     180:	02 c0       	rjmp	.+4      	; 0x186 <.do_copy_data_start>

00000182 <.do_copy_data_loop>:
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0

00000186 <.do_copy_data_start>:
     186:	a6 30       	cpi	r26, 0x06	; 6
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <.do_copy_data_loop>

0000018c <__do_clear_bss>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	a6 e0       	ldi	r26, 0x06	; 6
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	aa 33       	cpi	r26, 0x3A	; 58
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
     1a0:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <main>:
extern StepperMotor rightMotor;
//unsigned long milliseconds;
//void startTimer(void);

int main(void)
{
     1a8:	cf 92       	push	r12
     1aa:	df 92       	push	r13
     1ac:	ef 92       	push	r14
     1ae:	ff 92       	push	r15
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
	setupStepperMotor();
     1b4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <setupStepperMotor>
	USART_init();
     1b8:	0e 94 36 03 	call	0x66c	; 0x66c <USART_init>
	
	setDirection(0, 0);
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	0e 94 01 03 	call	0x602	; 0x602 <setDirection>
	straight(5000, 900, 3000, 100, 3000, 2000);	
     1c8:	68 e8       	ldi	r22, 0x88	; 136
     1ca:	73 e1       	ldi	r23, 0x13	; 19
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	44 e8       	ldi	r20, 0x84	; 132
     1d2:	53 e0       	ldi	r21, 0x03	; 3
     1d4:	28 eb       	ldi	r18, 0xB8	; 184
     1d6:	3b e0       	ldi	r19, 0x0B	; 11
     1d8:	04 e6       	ldi	r16, 0x64	; 100
     1da:	10 e0       	ldi	r17, 0x00	; 0
     1dc:	f8 eb       	ldi	r31, 0xB8	; 184
     1de:	ef 2e       	mov	r14, r31
     1e0:	fb e0       	ldi	r31, 0x0B	; 11
     1e2:	ff 2e       	mov	r15, r31
     1e4:	e0 ed       	ldi	r30, 0xD0	; 208
     1e6:	ce 2e       	mov	r12, r30
     1e8:	e7 e0       	ldi	r30, 0x07	; 7
     1ea:	de 2e       	mov	r13, r30
     1ec:	0e 94 fd 04 	call	0x9fa	; 0x9fa <straight>
	
	enableDrive(0, 0);
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	0e 94 ed 01 	call	0x3da	; 0x3da <enableDrive>
	turnOnTimers(0, 0);
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	0e 94 22 03 	call	0x644	; 0x644 <turnOnTimers>
     208:	ff cf       	rjmp	.-2      	; 0x208 <main+0x60>

0000020a <accelerateMotorToPoint>:
	//Set Interrupt Timer, since somtimes we need to wait a value larger then 255, modify delayCounter accordingly
	OCR2A = eightBitTimerFix(&rightMotor);	
}

int accelerateMotorToPoint(struct StepperMotor *motor)
{	
     20a:	6f 92       	push	r6
     20c:	7f 92       	push	r7
     20e:	8f 92       	push	r8
     210:	9f 92       	push	r9
     212:	af 92       	push	r10
     214:	bf 92       	push	r11
     216:	cf 92       	push	r12
     218:	df 92       	push	r13
     21a:	ef 92       	push	r14
     21c:	ff 92       	push	r15
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	ec 01       	movw	r28, r24
	if(motor->stepAccel == 0)
     228:	8a 85       	ldd	r24, Y+10	; 0x0a
     22a:	9b 85       	ldd	r25, Y+11	; 0x0b
     22c:	89 2b       	or	r24, r25
     22e:	09 f0       	breq	.+2      	; 0x232 <accelerateMotorToPoint+0x28>
     230:	be c0       	rjmp	.+380    	; 0x3ae <accelerateMotorToPoint+0x1a4>
	{
		//Need to Accelerate
		if(motor->currentStepDelay > motor->targetDelay)
     232:	6c 81       	ldd	r22, Y+4	; 0x04
     234:	7d 81       	ldd	r23, Y+5	; 0x05
     236:	8e 81       	ldd	r24, Y+6	; 0x06
     238:	9f 81       	ldd	r25, Y+7	; 0x07
     23a:	2c 85       	ldd	r18, Y+12	; 0x0c
     23c:	3d 85       	ldd	r19, Y+13	; 0x0d
     23e:	4e 85       	ldd	r20, Y+14	; 0x0e
     240:	5f 85       	ldd	r21, Y+15	; 0x0f
     242:	0e 94 39 0b 	call	0x1672	; 0x1672 <__gesf2>
     246:	18 16       	cp	r1, r24
     248:	0c f0       	brlt	.+2      	; 0x24c <accelerateMotorToPoint+0x42>
     24a:	53 c0       	rjmp	.+166    	; 0x2f2 <accelerateMotorToPoint+0xe8>
		{	
			motor->tempCount++;
     24c:	88 89       	ldd	r24, Y+16	; 0x10
     24e:	99 89       	ldd	r25, Y+17	; 0x11
     250:	01 96       	adiw	r24, 0x01	; 1
     252:	99 8b       	std	Y+17, r25	; 0x11
     254:	88 8b       	std	Y+16, r24	; 0x10
			motor->currentStepDelay -= (float)(2.0 * motor->currentStepDelay) / (float)(4.0 * motor->tempCount + 1);
     256:	6c 80       	ldd	r6, Y+4	; 0x04
     258:	7d 80       	ldd	r7, Y+5	; 0x05
     25a:	8e 80       	ldd	r8, Y+6	; 0x06
     25c:	9f 80       	ldd	r9, Y+7	; 0x07
     25e:	6c 81       	ldd	r22, Y+4	; 0x04
     260:	7d 81       	ldd	r23, Y+5	; 0x05
     262:	8e 81       	ldd	r24, Y+6	; 0x06
     264:	9f 81       	ldd	r25, Y+7	; 0x07
     266:	e8 88       	ldd	r14, Y+16	; 0x10
     268:	f9 88       	ldd	r15, Y+17	; 0x11
     26a:	20 e0       	ldi	r18, 0x00	; 0
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	40 e0       	ldi	r20, 0x00	; 0
     270:	50 ec       	ldi	r21, 0xC0	; 192
     272:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     276:	5b 01       	movw	r10, r22
     278:	6c 01       	movw	r12, r24
     27a:	00 27       	eor	r16, r16
     27c:	f7 fc       	sbrc	r15, 7
     27e:	00 95       	com	r16
     280:	10 2f       	mov	r17, r16
     282:	c8 01       	movw	r24, r16
     284:	b7 01       	movw	r22, r14
     286:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	40 e8       	ldi	r20, 0x80	; 128
     290:	50 e4       	ldi	r21, 0x40	; 64
     292:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e8       	ldi	r20, 0x80	; 128
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3>
     2a2:	9b 01       	movw	r18, r22
     2a4:	ac 01       	movw	r20, r24
     2a6:	c6 01       	movw	r24, r12
     2a8:	b5 01       	movw	r22, r10
     2aa:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     2ae:	9b 01       	movw	r18, r22
     2b0:	ac 01       	movw	r20, r24
     2b2:	c4 01       	movw	r24, r8
     2b4:	b3 01       	movw	r22, r6
     2b6:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3>
     2ba:	6c 83       	std	Y+4, r22	; 0x04
     2bc:	7d 83       	std	Y+5, r23	; 0x05
     2be:	8e 83       	std	Y+6, r24	; 0x06
     2c0:	9f 83       	std	Y+7, r25	; 0x07
			
			if(motor->currentStepDelay < motor->targetDelay)
     2c2:	6c 81       	ldd	r22, Y+4	; 0x04
     2c4:	7d 81       	ldd	r23, Y+5	; 0x05
     2c6:	8e 81       	ldd	r24, Y+6	; 0x06
     2c8:	9f 81       	ldd	r25, Y+7	; 0x07
     2ca:	2c 85       	ldd	r18, Y+12	; 0x0c
     2cc:	3d 85       	ldd	r19, Y+13	; 0x0d
     2ce:	4e 85       	ldd	r20, Y+14	; 0x0e
     2d0:	5f 85       	ldd	r21, Y+15	; 0x0f
     2d2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__cmpsf2>
     2d6:	88 23       	and	r24, r24
     2d8:	64 f4       	brge	.+24     	; 0x2f2 <accelerateMotorToPoint+0xe8>
			{	
				motor->currentStepDelay = motor->targetDelay;
     2da:	8c 85       	ldd	r24, Y+12	; 0x0c
     2dc:	9d 85       	ldd	r25, Y+13	; 0x0d
     2de:	ae 85       	ldd	r26, Y+14	; 0x0e
     2e0:	bf 85       	ldd	r27, Y+15	; 0x0f
     2e2:	8c 83       	std	Y+4, r24	; 0x04
     2e4:	9d 83       	std	Y+5, r25	; 0x05
     2e6:	ae 83       	std	Y+6, r26	; 0x06
     2e8:	bf 83       	std	Y+7, r27	; 0x07
				motor->stepAccel = 1 ;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	9b 87       	std	Y+11, r25	; 0x0b
     2f0:	8a 87       	std	Y+10, r24	; 0x0a
			}
		}
		//Need to decelerate 
		if(motor->currentStepDelay < motor->targetDelay)
     2f2:	6c 81       	ldd	r22, Y+4	; 0x04
     2f4:	7d 81       	ldd	r23, Y+5	; 0x05
     2f6:	8e 81       	ldd	r24, Y+6	; 0x06
     2f8:	9f 81       	ldd	r25, Y+7	; 0x07
     2fa:	2c 85       	ldd	r18, Y+12	; 0x0c
     2fc:	3d 85       	ldd	r19, Y+13	; 0x0d
     2fe:	4e 85       	ldd	r20, Y+14	; 0x0e
     300:	5f 85       	ldd	r21, Y+15	; 0x0f
     302:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__cmpsf2>
     306:	88 23       	and	r24, r24
     308:	0c f0       	brlt	.+2      	; 0x30c <accelerateMotorToPoint+0x102>
     30a:	51 c0       	rjmp	.+162    	; 0x3ae <accelerateMotorToPoint+0x1a4>
		{		
			motor->tempCount--;
     30c:	88 89       	ldd	r24, Y+16	; 0x10
     30e:	99 89       	ldd	r25, Y+17	; 0x11
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	99 8b       	std	Y+17, r25	; 0x11
     314:	88 8b       	std	Y+16, r24	; 0x10
			motor->currentStepDelay += (float)(2.0 * motor->currentStepDelay) / (float)(4.0 * motor->tempCount + 1);
     316:	6c 80       	ldd	r6, Y+4	; 0x04
     318:	7d 80       	ldd	r7, Y+5	; 0x05
     31a:	8e 80       	ldd	r8, Y+6	; 0x06
     31c:	9f 80       	ldd	r9, Y+7	; 0x07
     31e:	2c 81       	ldd	r18, Y+4	; 0x04
     320:	3d 81       	ldd	r19, Y+5	; 0x05
     322:	4e 81       	ldd	r20, Y+6	; 0x06
     324:	5f 81       	ldd	r21, Y+7	; 0x07
     326:	e8 88       	ldd	r14, Y+16	; 0x10
     328:	f9 88       	ldd	r15, Y+17	; 0x11
     32a:	ca 01       	movw	r24, r20
     32c:	b9 01       	movw	r22, r18
     32e:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3>
     332:	5b 01       	movw	r10, r22
     334:	6c 01       	movw	r12, r24
     336:	00 27       	eor	r16, r16
     338:	f7 fc       	sbrc	r15, 7
     33a:	00 95       	com	r16
     33c:	10 2f       	mov	r17, r16
     33e:	c8 01       	movw	r24, r16
     340:	b7 01       	movw	r22, r14
     342:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	40 e8       	ldi	r20, 0x80	; 128
     34c:	50 e4       	ldi	r21, 0x40	; 64
     34e:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	40 e8       	ldi	r20, 0x80	; 128
     358:	5f e3       	ldi	r21, 0x3F	; 63
     35a:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3>
     35e:	9b 01       	movw	r18, r22
     360:	ac 01       	movw	r20, r24
     362:	c6 01       	movw	r24, r12
     364:	b5 01       	movw	r22, r10
     366:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     36a:	9b 01       	movw	r18, r22
     36c:	ac 01       	movw	r20, r24
     36e:	c4 01       	movw	r24, r8
     370:	b3 01       	movw	r22, r6
     372:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3>
     376:	6c 83       	std	Y+4, r22	; 0x04
     378:	7d 83       	std	Y+5, r23	; 0x05
     37a:	8e 83       	std	Y+6, r24	; 0x06
     37c:	9f 83       	std	Y+7, r25	; 0x07
			
			if(motor->currentStepDelay > motor->targetDelay)
     37e:	6c 81       	ldd	r22, Y+4	; 0x04
     380:	7d 81       	ldd	r23, Y+5	; 0x05
     382:	8e 81       	ldd	r24, Y+6	; 0x06
     384:	9f 81       	ldd	r25, Y+7	; 0x07
     386:	2c 85       	ldd	r18, Y+12	; 0x0c
     388:	3d 85       	ldd	r19, Y+13	; 0x0d
     38a:	4e 85       	ldd	r20, Y+14	; 0x0e
     38c:	5f 85       	ldd	r21, Y+15	; 0x0f
     38e:	0e 94 39 0b 	call	0x1672	; 0x1672 <__gesf2>
     392:	18 16       	cp	r1, r24
     394:	64 f4       	brge	.+24     	; 0x3ae <accelerateMotorToPoint+0x1a4>
			{
				motor->currentStepDelay = motor->targetDelay;
     396:	8c 85       	ldd	r24, Y+12	; 0x0c
     398:	9d 85       	ldd	r25, Y+13	; 0x0d
     39a:	ae 85       	ldd	r26, Y+14	; 0x0e
     39c:	bf 85       	ldd	r27, Y+15	; 0x0f
     39e:	8c 83       	std	Y+4, r24	; 0x04
     3a0:	9d 83       	std	Y+5, r25	; 0x05
     3a2:	ae 83       	std	Y+6, r26	; 0x06
     3a4:	bf 83       	std	Y+7, r27	; 0x07
				motor->stepAccel = 1;
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	9b 87       	std	Y+11, r25	; 0x0b
     3ac:	8a 87       	std	Y+10, r24	; 0x0a
			}
		}	
	}
	
	return motor->currentStepDelay;
     3ae:	6c 81       	ldd	r22, Y+4	; 0x04
     3b0:	7d 81       	ldd	r23, Y+5	; 0x05
     3b2:	8e 81       	ldd	r24, Y+6	; 0x06
     3b4:	9f 81       	ldd	r25, Y+7	; 0x07
     3b6:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixsfsi>
}
     3ba:	cb 01       	movw	r24, r22
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	ff 90       	pop	r15
     3c6:	ef 90       	pop	r14
     3c8:	df 90       	pop	r13
     3ca:	cf 90       	pop	r12
     3cc:	bf 90       	pop	r11
     3ce:	af 90       	pop	r10
     3d0:	9f 90       	pop	r9
     3d2:	8f 90       	pop	r8
     3d4:	7f 90       	pop	r7
     3d6:	6f 90       	pop	r6
     3d8:	08 95       	ret

000003da <enableDrive>:
	enableDrive(0, 0);	
}

void enableDrive(int left, int right)
{
	if(left == 1)	
     3da:	01 97       	sbiw	r24, 0x01	; 1
     3dc:	11 f4       	brne	.+4      	; 0x3e2 <enableDrive+0x8>
		PORTD &= ~(1 << PD6);	
     3de:	5e 98       	cbi	0x0b, 6	; 11
     3e0:	05 c0       	rjmp	.+10     	; 0x3ec <enableDrive+0x12>
	else if(right == 0)
     3e2:	61 15       	cp	r22, r1
     3e4:	71 05       	cpc	r23, r1
     3e6:	11 f4       	brne	.+4      	; 0x3ec <enableDrive+0x12>
		PORTD |= (1 << PD6);
     3e8:	5e 9a       	sbi	0x0b, 6	; 11
     3ea:	07 c0       	rjmp	.+14     	; 0x3fa <enableDrive+0x20>
	
	if(right == 1)	
     3ec:	61 30       	cpi	r22, 0x01	; 1
     3ee:	71 05       	cpc	r23, r1
     3f0:	11 f4       	brne	.+4      	; 0x3f6 <enableDrive+0x1c>
		PORTD &= ~(1 << PD7);	
     3f2:	5f 98       	cbi	0x0b, 7	; 11
     3f4:	08 95       	ret
	else if(right == 0)	
     3f6:	67 2b       	or	r22, r23
     3f8:	09 f4       	brne	.+2      	; 0x3fc <enableDrive+0x22>
		PORTD |= (1 << PD7);	
     3fa:	5f 9a       	sbi	0x0b, 7	; 11
     3fc:	08 95       	ret

000003fe <setupStepperMotor>:
}

void setupStepperMotor()
{
	//Motor Pins are D2 and D4 on arduino nano
	DDRD |= (1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4);
     3fe:	8a b1       	in	r24, 0x0a	; 10
     400:	8c 61       	ori	r24, 0x1C	; 28
     402:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << PORTB1) | (1 << PORTB0);
     404:	84 b1       	in	r24, 0x04	; 4
     406:	83 60       	ori	r24, 0x03	; 3
     408:	84 b9       	out	0x04, r24	; 4
	//Set to CTC
	TCCR0A = (1 << WGM01);
     40a:	92 e0       	ldi	r25, 0x02	; 2
     40c:	94 bd       	out	0x24, r25	; 36
	TCCR2A = (1 << WGM21);
     40e:	90 93 b0 00 	sts	0x00B0, r25
	
	//Compare Ticks
	OCR0A = 1;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	87 bd       	out	0x27, r24	; 39
	OCR2A = 1;
     416:	80 93 b3 00 	sts	0x00B3, r24
	
	//Enable Interrupts
	TIMSK0 = (1 << OCIE0A);
     41a:	90 93 6e 00 	sts	0x006E, r25
	TIMSK2 = (1 << OCIE2A);
     41e:	90 93 70 00 	sts	0x0070, r25
	
	//Set Prescalar to 0
	OCR0B = 0;
     422:	18 bc       	out	0x28, r1	; 40
	OCR2B = 0;
     424:	10 92 b4 00 	sts	0x00B4, r1
	
	//Enable Interrupts
	sei(); 
     428:	78 94       	sei
	
	enableDrive(0, 0);	
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	0e 94 ed 01 	call	0x3da	; 0x3da <enableDrive>
}
     436:	08 95       	ret

00000438 <pulseMotor>:
		PORTD |= (1 << PD7);	
}

/* Pulse port and pin for 10 microseconds */
void pulseMotor(volatile uint8_t *port, uint8_t pin)
{
     438:	fc 01       	movw	r30, r24
	//Send Pulse to Motor
	(*port) |= (1 << pin);
     43a:	20 81       	ld	r18, Z
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	02 c0       	rjmp	.+4      	; 0x446 <pulseMotor+0xe>
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	6a 95       	dec	r22
     448:	e2 f7       	brpl	.-8      	; 0x442 <pulseMotor+0xa>
     44a:	28 2b       	or	r18, r24
     44c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     44e:	95 e3       	ldi	r25, 0x35	; 53
     450:	9a 95       	dec	r25
     452:	f1 f7       	brne	.-4      	; 0x450 <pulseMotor+0x18>
	_delay_us(10);
	(*port) &= ~(1 << pin);
     454:	20 81       	ld	r18, Z
     456:	80 95       	com	r24
     458:	82 23       	and	r24, r18
     45a:	80 83       	st	Z, r24
}
     45c:	08 95       	ret

0000045e <__vector_7>:
	OCR0A = eightBitTimerFix(&leftMotor);	
}

/* RIGHT MOTOR CONTROL */
ISR(TIMER2_COMPA_vect)
{
     45e:	1f 92       	push	r1
     460:	0f 92       	push	r0
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	0f 92       	push	r0
     466:	11 24       	eor	r1, r1
     468:	2f 93       	push	r18
     46a:	3f 93       	push	r19
     46c:	4f 93       	push	r20
     46e:	5f 93       	push	r21
     470:	6f 93       	push	r22
     472:	7f 93       	push	r23
     474:	8f 93       	push	r24
     476:	9f 93       	push	r25
     478:	af 93       	push	r26
     47a:	bf 93       	push	r27
     47c:	ef 93       	push	r30
     47e:	ff 93       	push	r31
	//Set to max initially to prevent the next interrupt cycle from overwriting this one
	OCR2A = 255;
     480:	8f ef       	ldi	r24, 0xFF	; 255
     482:	80 93 b3 00 	sts	0x00B3, r24
	
	//If we are ready to step the motor again
	if(rightMotor.delayCounter == 0)
     486:	80 91 0e 01 	lds	r24, 0x010E
     48a:	90 91 0f 01 	lds	r25, 0x010F
     48e:	89 2b       	or	r24, r25
     490:	01 f5       	brne	.+64     	; 0x4d2 <__vector_7+0x74>
	{
		//Pulse and increment motor
		pulseMotor(&PORTD, PD4);
     492:	8b e2       	ldi	r24, 0x2B	; 43
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	64 e0       	ldi	r22, 0x04	; 4
     498:	0e 94 1c 02 	call	0x438	; 0x438 <pulseMotor>
		rightMotor.stepCount++;
     49c:	80 91 06 01 	lds	r24, 0x0106
     4a0:	90 91 07 01 	lds	r25, 0x0107
     4a4:	a0 91 08 01 	lds	r26, 0x0108
     4a8:	b0 91 09 01 	lds	r27, 0x0109
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	a1 1d       	adc	r26, r1
     4b0:	b1 1d       	adc	r27, r1
     4b2:	80 93 06 01 	sts	0x0106, r24
     4b6:	90 93 07 01 	sts	0x0107, r25
     4ba:	a0 93 08 01 	sts	0x0108, r26
     4be:	b0 93 09 01 	sts	0x0109, r27
		
		//Calculate the next delay
		rightMotor.delayCounter = accelerateMotorToPoint(&rightMotor);
     4c2:	86 e0       	ldi	r24, 0x06	; 6
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 05 01 	call	0x20a	; 0x20a <accelerateMotorToPoint>
     4ca:	90 93 0f 01 	sts	0x010F, r25
     4ce:	80 93 0e 01 	sts	0x010E, r24

int eightBitTimerFix(struct StepperMotor *motor)
{
	int returnNum;

	if(motor->delayCounter <= 255)
     4d2:	80 91 0e 01 	lds	r24, 0x010E
     4d6:	90 91 0f 01 	lds	r25, 0x010F
     4da:	8f 3f       	cpi	r24, 0xFF	; 255
     4dc:	91 05       	cpc	r25, r1
     4de:	09 f0       	breq	.+2      	; 0x4e2 <__vector_7+0x84>
     4e0:	4c f4       	brge	.+18     	; 0x4f4 <__vector_7+0x96>
	{
		returnNum = motor->delayCounter;
     4e2:	80 91 0e 01 	lds	r24, 0x010E
     4e6:	90 91 0f 01 	lds	r25, 0x010F
		motor->delayCounter = 0;	
     4ea:	10 92 0f 01 	sts	0x010F, r1
     4ee:	10 92 0e 01 	sts	0x010E, r1
     4f2:	0c c0       	rjmp	.+24     	; 0x50c <__vector_7+0xae>
	}
	else
	{
		motor->delayCounter -= 255;
     4f4:	80 91 0e 01 	lds	r24, 0x010E
     4f8:	90 91 0f 01 	lds	r25, 0x010F
     4fc:	8f 5f       	subi	r24, 0xFF	; 255
     4fe:	90 40       	sbci	r25, 0x00	; 0
     500:	90 93 0f 01 	sts	0x010F, r25
     504:	80 93 0e 01 	sts	0x010E, r24
     508:	8f ef       	ldi	r24, 0xFF	; 255
     50a:	90 e0       	ldi	r25, 0x00	; 0
		//Calculate the next delay
		rightMotor.delayCounter = accelerateMotorToPoint(&rightMotor);
	}
	
	//Set Interrupt Timer, since somtimes we need to wait a value larger then 255, modify delayCounter accordingly
	OCR2A = eightBitTimerFix(&rightMotor);	
     50c:	80 93 b3 00 	sts	0x00B3, r24
}
     510:	ff 91       	pop	r31
     512:	ef 91       	pop	r30
     514:	bf 91       	pop	r27
     516:	af 91       	pop	r26
     518:	9f 91       	pop	r25
     51a:	8f 91       	pop	r24
     51c:	7f 91       	pop	r23
     51e:	6f 91       	pop	r22
     520:	5f 91       	pop	r21
     522:	4f 91       	pop	r20
     524:	3f 91       	pop	r19
     526:	2f 91       	pop	r18
     528:	0f 90       	pop	r0
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	0f 90       	pop	r0
     52e:	1f 90       	pop	r1
     530:	18 95       	reti

00000532 <__vector_14>:



/* LEFT MOTOR CONTROL */
ISR(TIMER0_COMPA_vect)
{
     532:	1f 92       	push	r1
     534:	0f 92       	push	r0
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	0f 92       	push	r0
     53a:	11 24       	eor	r1, r1
     53c:	2f 93       	push	r18
     53e:	3f 93       	push	r19
     540:	4f 93       	push	r20
     542:	5f 93       	push	r21
     544:	6f 93       	push	r22
     546:	7f 93       	push	r23
     548:	8f 93       	push	r24
     54a:	9f 93       	push	r25
     54c:	af 93       	push	r26
     54e:	bf 93       	push	r27
     550:	ef 93       	push	r30
     552:	ff 93       	push	r31
	//Set to max initially to prevent the next interrupt cycle from overwriting this one
	OCR0A = 255;
     554:	8f ef       	ldi	r24, 0xFF	; 255
     556:	87 bd       	out	0x27, r24	; 39
	
	//If we are ready to step the motor again
	if(leftMotor.delayCounter == 0)
     558:	80 91 20 01 	lds	r24, 0x0120
     55c:	90 91 21 01 	lds	r25, 0x0121
     560:	89 2b       	or	r24, r25
     562:	01 f5       	brne	.+64     	; 0x5a4 <__vector_14+0x72>
	{
		//Pulse and increment motor
		pulseMotor(&PORTD, PD2);
     564:	8b e2       	ldi	r24, 0x2B	; 43
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	62 e0       	ldi	r22, 0x02	; 2
     56a:	0e 94 1c 02 	call	0x438	; 0x438 <pulseMotor>
		leftMotor.stepCount++;		
     56e:	80 91 18 01 	lds	r24, 0x0118
     572:	90 91 19 01 	lds	r25, 0x0119
     576:	a0 91 1a 01 	lds	r26, 0x011A
     57a:	b0 91 1b 01 	lds	r27, 0x011B
     57e:	01 96       	adiw	r24, 0x01	; 1
     580:	a1 1d       	adc	r26, r1
     582:	b1 1d       	adc	r27, r1
     584:	80 93 18 01 	sts	0x0118, r24
     588:	90 93 19 01 	sts	0x0119, r25
     58c:	a0 93 1a 01 	sts	0x011A, r26
     590:	b0 93 1b 01 	sts	0x011B, r27
		
		//Calculate the next delay
		leftMotor.delayCounter = accelerateMotorToPoint(&leftMotor);	
     594:	88 e1       	ldi	r24, 0x18	; 24
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 05 01 	call	0x20a	; 0x20a <accelerateMotorToPoint>
     59c:	90 93 21 01 	sts	0x0121, r25
     5a0:	80 93 20 01 	sts	0x0120, r24

int eightBitTimerFix(struct StepperMotor *motor)
{
	int returnNum;

	if(motor->delayCounter <= 255)
     5a4:	80 91 20 01 	lds	r24, 0x0120
     5a8:	90 91 21 01 	lds	r25, 0x0121
     5ac:	8f 3f       	cpi	r24, 0xFF	; 255
     5ae:	91 05       	cpc	r25, r1
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <__vector_14+0x82>
     5b2:	4c f4       	brge	.+18     	; 0x5c6 <__vector_14+0x94>
	{
		returnNum = motor->delayCounter;
     5b4:	80 91 20 01 	lds	r24, 0x0120
     5b8:	90 91 21 01 	lds	r25, 0x0121
		motor->delayCounter = 0;	
     5bc:	10 92 21 01 	sts	0x0121, r1
     5c0:	10 92 20 01 	sts	0x0120, r1
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <__vector_14+0xac>
	}
	else
	{
		motor->delayCounter -= 255;
     5c6:	80 91 20 01 	lds	r24, 0x0120
     5ca:	90 91 21 01 	lds	r25, 0x0121
     5ce:	8f 5f       	subi	r24, 0xFF	; 255
     5d0:	90 40       	sbci	r25, 0x00	; 0
     5d2:	90 93 21 01 	sts	0x0121, r25
     5d6:	80 93 20 01 	sts	0x0120, r24
     5da:	8f ef       	ldi	r24, 0xFF	; 255
     5dc:	90 e0       	ldi	r25, 0x00	; 0
		//Calculate the next delay
		leftMotor.delayCounter = accelerateMotorToPoint(&leftMotor);	
	}

	//Set Interrupt Timer, since somtimes we need to wait a value larger then 255, modify delayCounter accordingly
	OCR0A = eightBitTimerFix(&leftMotor);	
     5de:	87 bd       	out	0x27, r24	; 39
}
     5e0:	ff 91       	pop	r31
     5e2:	ef 91       	pop	r30
     5e4:	bf 91       	pop	r27
     5e6:	af 91       	pop	r26
     5e8:	9f 91       	pop	r25
     5ea:	8f 91       	pop	r24
     5ec:	7f 91       	pop	r23
     5ee:	6f 91       	pop	r22
     5f0:	5f 91       	pop	r21
     5f2:	4f 91       	pop	r20
     5f4:	3f 91       	pop	r19
     5f6:	2f 91       	pop	r18
     5f8:	0f 90       	pop	r0
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	0f 90       	pop	r0
     5fe:	1f 90       	pop	r1
     600:	18 95       	reti

00000602 <setDirection>:
	(*port) &= ~(1 << pin);
}

void setDirection(int left, int right)
{
	if(left)
     602:	89 2b       	or	r24, r25
     604:	11 f0       	breq	.+4      	; 0x60a <setDirection+0x8>
		PORTB &= ~(1 << PB0);
     606:	28 98       	cbi	0x05, 0	; 5
     608:	01 c0       	rjmp	.+2      	; 0x60c <setDirection+0xa>
	else
		PORTB |= (1 << PB0);
     60a:	28 9a       	sbi	0x05, 0	; 5
		
	if(right)
     60c:	67 2b       	or	r22, r23
     60e:	11 f0       	breq	.+4      	; 0x614 <setDirection+0x12>
		PORTB |= (1 << PB1);
     610:	29 9a       	sbi	0x05, 1	; 5
     612:	08 95       	ret
	else
		PORTB &= ~(1 << PB1);
     614:	29 98       	cbi	0x05, 1	; 5
     616:	08 95       	ret

00000618 <eightBitTimerFix>:
}


int eightBitTimerFix(struct StepperMotor *motor)
{
     618:	fc 01       	movw	r30, r24
	int returnNum;

	if(motor->delayCounter <= 255)
     61a:	80 85       	ldd	r24, Z+8	; 0x08
     61c:	91 85       	ldd	r25, Z+9	; 0x09
     61e:	8f 3f       	cpi	r24, 0xFF	; 255
     620:	91 05       	cpc	r25, r1
     622:	09 f0       	breq	.+2      	; 0x626 <eightBitTimerFix+0xe>
     624:	2c f4       	brge	.+10     	; 0x630 <eightBitTimerFix+0x18>
	{
		returnNum = motor->delayCounter;
     626:	20 85       	ldd	r18, Z+8	; 0x08
     628:	31 85       	ldd	r19, Z+9	; 0x09
		motor->delayCounter = 0;	
     62a:	11 86       	std	Z+9, r1	; 0x09
     62c:	10 86       	std	Z+8, r1	; 0x08
     62e:	08 c0       	rjmp	.+16     	; 0x640 <eightBitTimerFix+0x28>
	}
	else
	{
		motor->delayCounter -= 255;
     630:	80 85       	ldd	r24, Z+8	; 0x08
     632:	91 85       	ldd	r25, Z+9	; 0x09
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	90 40       	sbci	r25, 0x00	; 0
     638:	91 87       	std	Z+9, r25	; 0x09
     63a:	80 87       	std	Z+8, r24	; 0x08
     63c:	2f ef       	ldi	r18, 0xFF	; 255
     63e:	30 e0       	ldi	r19, 0x00	; 0
		returnNum = 255;
	}

	return returnNum;
}
     640:	c9 01       	movw	r24, r18
     642:	08 95       	ret

00000644 <turnOnTimers>:

void turnOnTimers(int one, int two)
{
	if(one)
     644:	89 2b       	or	r24, r25
     646:	19 f0       	breq	.+6      	; 0x64e <turnOnTimers+0xa>
		TCCR0B |= (1 << CS01) | (1 << CS00);
     648:	85 b5       	in	r24, 0x25	; 37
     64a:	83 60       	ori	r24, 0x03	; 3
     64c:	02 c0       	rjmp	.+4      	; 0x652 <turnOnTimers+0xe>
	else
		TCCR0B &= ~((1 << CS01) | (1 << CS00));
     64e:	85 b5       	in	r24, 0x25	; 37
     650:	8c 7f       	andi	r24, 0xFC	; 252
     652:	85 bd       	out	0x25, r24	; 37
		
	if(two)
     654:	67 2b       	or	r22, r23
     656:	21 f0       	breq	.+8      	; 0x660 <turnOnTimers+0x1c>
		TCCR2B |= (1 << CS22);
     658:	80 91 b1 00 	lds	r24, 0x00B1
     65c:	84 60       	ori	r24, 0x04	; 4
     65e:	03 c0       	rjmp	.+6      	; 0x666 <turnOnTimers+0x22>
	else	
		TCCR2B &= ~(1 << CS22);
     660:	80 91 b1 00 	lds	r24, 0x00B1
     664:	8b 7f       	andi	r24, 0xFB	; 251
     666:	80 93 b1 00 	sts	0x00B1, r24
     66a:	08 95       	ret

0000066c <USART_init>:
void USART_putstring(char* StringPtr);
 
 
void USART_init(void){
 
 UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
     66c:	10 92 c5 00 	sts	0x00C5, r1
 UBRR0L = (uint8_t)(BAUD_PRESCALLER);
     670:	87 e6       	ldi	r24, 0x67	; 103
     672:	80 93 c4 00 	sts	0x00C4, r24
 UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     676:	88 e1       	ldi	r24, 0x18	; 24
     678:	80 93 c1 00 	sts	0x00C1, r24
 UCSR0C = (3<<UCSZ00);
     67c:	86 e0       	ldi	r24, 0x06	; 6
     67e:	80 93 c2 00 	sts	0x00C2, r24
}
     682:	08 95       	ret

00000684 <USART_receive>:
 
unsigned char USART_receive(void){
 
 while(!(UCSR0A & (1<<RXC0)));
     684:	80 91 c0 00 	lds	r24, 0x00C0
     688:	87 ff       	sbrs	r24, 7
     68a:	fc cf       	rjmp	.-8      	; 0x684 <USART_receive>
 return UDR0;
     68c:	80 91 c6 00 	lds	r24, 0x00C6
 
}
     690:	08 95       	ret

00000692 <USART_send>:
 
void USART_send( unsigned char data){
     692:	98 2f       	mov	r25, r24
 
 while(!(UCSR0A & (1<<UDRE0)));
     694:	80 91 c0 00 	lds	r24, 0x00C0
     698:	85 ff       	sbrs	r24, 5
     69a:	fc cf       	rjmp	.-8      	; 0x694 <USART_send+0x2>
 UDR0 = data;
     69c:	90 93 c6 00 	sts	0x00C6, r25
 
}
     6a0:	08 95       	ret

000006a2 <USART_putstring>:
 
void USART_putstring(char* StringPtr){
     6a2:	fc 01       	movw	r30, r24
     6a4:	07 c0       	rjmp	.+14     	; 0x6b4 <USART_putstring+0x12>
 
}
 
void USART_send( unsigned char data){
 
 while(!(UCSR0A & (1<<UDRE0)));
     6a6:	80 91 c0 00 	lds	r24, 0x00C0
     6aa:	85 ff       	sbrs	r24, 5
     6ac:	fc cf       	rjmp	.-8      	; 0x6a6 <USART_putstring+0x4>
 UDR0 = data;
     6ae:	90 93 c6 00 	sts	0x00C6, r25
 
void USART_putstring(char* StringPtr){
 
while(*StringPtr != 0x00){
 USART_send(*StringPtr);
 StringPtr++;}
     6b2:	31 96       	adiw	r30, 0x01	; 1
 
}
 
void USART_putstring(char* StringPtr){
 
while(*StringPtr != 0x00){
     6b4:	90 81       	ld	r25, Z
     6b6:	99 23       	and	r25, r25
     6b8:	b1 f7       	brne	.-20     	; 0x6a6 <USART_putstring+0x4>
 USART_send(*StringPtr);
 StringPtr++;}
 
}
     6ba:	08 95       	ret

000006bc <print>:
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial
}

void print(char* string)
{
	USART_putstring(string);
     6bc:	0e 94 51 03 	call	0x6a2	; 0x6a2 <USART_putstring>
     6c0:	08 95       	ret

000006c2 <printNum>:
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial  
	USART_putstring("\n\r");
}

void printNum(float value)
{
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
	sprintf(str,"%f",value);
     6c6:	2d b7       	in	r18, 0x3d	; 61
     6c8:	3e b7       	in	r19, 0x3e	; 62
     6ca:	28 50       	subi	r18, 0x08	; 8
     6cc:	30 40       	sbci	r19, 0x00	; 0
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	3e bf       	out	0x3e, r19	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	2d bf       	out	0x3d, r18	; 61
     6d8:	ed b7       	in	r30, 0x3d	; 61
     6da:	fe b7       	in	r31, 0x3e	; 62
     6dc:	31 96       	adiw	r30, 0x01	; 1
     6de:	0a e2       	ldi	r16, 0x2A	; 42
     6e0:	11 e0       	ldi	r17, 0x01	; 1
     6e2:	ad b7       	in	r26, 0x3d	; 61
     6e4:	be b7       	in	r27, 0x3e	; 62
     6e6:	12 96       	adiw	r26, 0x02	; 2
     6e8:	1c 93       	st	X, r17
     6ea:	0e 93       	st	-X, r16
     6ec:	11 97       	sbiw	r26, 0x01	; 1
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	31 e0       	ldi	r19, 0x01	; 1
     6f2:	33 83       	std	Z+3, r19	; 0x03
     6f4:	22 83       	std	Z+2, r18	; 0x02
     6f6:	64 83       	std	Z+4, r22	; 0x04
     6f8:	75 83       	std	Z+5, r23	; 0x05
     6fa:	86 83       	std	Z+6, r24	; 0x06
     6fc:	97 83       	std	Z+7, r25	; 0x07
     6fe:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <sprintf>
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial
     702:	2d b7       	in	r18, 0x3d	; 61
     704:	3e b7       	in	r19, 0x3e	; 62
     706:	28 5f       	subi	r18, 0xF8	; 248
     708:	3f 4f       	sbci	r19, 0xFF	; 255
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	3e bf       	out	0x3e, r19	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	2d bf       	out	0x3d, r18	; 61
     714:	c8 01       	movw	r24, r16
     716:	0e 94 51 03 	call	0x6a2	; 0x6a2 <USART_putstring>
}
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	08 95       	ret

00000720 <printlnNum>:
 
}

char str[16];
void printlnNum(double value)
{
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
	sprintf(str,"%f",value);
     724:	2d b7       	in	r18, 0x3d	; 61
     726:	3e b7       	in	r19, 0x3e	; 62
     728:	28 50       	subi	r18, 0x08	; 8
     72a:	30 40       	sbci	r19, 0x00	; 0
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	3e bf       	out	0x3e, r19	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	2d bf       	out	0x3d, r18	; 61
     736:	ed b7       	in	r30, 0x3d	; 61
     738:	fe b7       	in	r31, 0x3e	; 62
     73a:	31 96       	adiw	r30, 0x01	; 1
     73c:	0a e2       	ldi	r16, 0x2A	; 42
     73e:	11 e0       	ldi	r17, 0x01	; 1
     740:	ad b7       	in	r26, 0x3d	; 61
     742:	be b7       	in	r27, 0x3e	; 62
     744:	12 96       	adiw	r26, 0x02	; 2
     746:	1c 93       	st	X, r17
     748:	0e 93       	st	-X, r16
     74a:	11 97       	sbiw	r26, 0x01	; 1
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	31 e0       	ldi	r19, 0x01	; 1
     750:	33 83       	std	Z+3, r19	; 0x03
     752:	22 83       	std	Z+2, r18	; 0x02
     754:	64 83       	std	Z+4, r22	; 0x04
     756:	75 83       	std	Z+5, r23	; 0x05
     758:	86 83       	std	Z+6, r24	; 0x06
     75a:	97 83       	std	Z+7, r25	; 0x07
     75c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <sprintf>
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial  
     760:	2d b7       	in	r18, 0x3d	; 61
     762:	3e b7       	in	r19, 0x3e	; 62
     764:	28 5f       	subi	r18, 0xF8	; 248
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	3e bf       	out	0x3e, r19	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	2d bf       	out	0x3d, r18	; 61
     772:	c8 01       	movw	r24, r16
     774:	0e 94 51 03 	call	0x6a2	; 0x6a2 <USART_putstring>
	USART_putstring("\n\r");
     778:	83 e0       	ldi	r24, 0x03	; 3
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <USART_putstring>
}
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	08 95       	ret

00000786 <setDecel>:
	}	
	
}

void setDecel(struct StepperMotor *motor, int maxSpeed, int exitSpeed, int decel)
{
     786:	cf 92       	push	r12
     788:	df 92       	push	r13
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	ec 01       	movw	r28, r24
     798:	8b 01       	movw	r16, r22
     79a:	ca 01       	movw	r24, r20
     79c:	69 01       	movw	r12, r18
	if(exitSpeed < 10)
     79e:	4a 30       	cpi	r20, 0x0A	; 10
     7a0:	51 05       	cpc	r21, r1
     7a2:	4c f4       	brge	.+18     	; 0x7b6 <setDecel+0x30>
		motor->targetDelay = 7500;
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e6       	ldi	r25, 0x60	; 96
     7a8:	aa ee       	ldi	r26, 0xEA	; 234
     7aa:	b5 e4       	ldi	r27, 0x45	; 69
     7ac:	8c 87       	std	Y+12, r24	; 0x0c
     7ae:	9d 87       	std	Y+13, r25	; 0x0d
     7b0:	ae 87       	std	Y+14, r26	; 0x0e
     7b2:	bf 87       	std	Y+15, r27	; 0x0f
     7b4:	13 c0       	rjmp	.+38     	; 0x7dc <setDecel+0x56>
	else
		motor->targetDelay = TIMER_FREQUENCY / exitSpeed;
     7b6:	9c 01       	movw	r18, r24
     7b8:	44 27       	eor	r20, r20
     7ba:	37 fd       	sbrc	r19, 7
     7bc:	40 95       	com	r20
     7be:	54 2f       	mov	r21, r20
     7c0:	60 e9       	ldi	r22, 0x90	; 144
     7c2:	70 ed       	ldi	r23, 0xD0	; 208
     7c4:	83 e0       	ldi	r24, 0x03	; 3
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__divmodsi4>
     7cc:	ca 01       	movw	r24, r20
     7ce:	b9 01       	movw	r22, r18
     7d0:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     7d4:	6c 87       	std	Y+12, r22	; 0x0c
     7d6:	7d 87       	std	Y+13, r23	; 0x0d
     7d8:	8e 87       	std	Y+14, r24	; 0x0e
     7da:	9f 87       	std	Y+15, r25	; 0x0f
		
	motor->stepAccel = 0;
     7dc:	1b 86       	std	Y+11, r1	; 0x0b
     7de:	1a 86       	std	Y+10, r1	; 0x0a
	motor->tempCount = (float)maxSpeed * (float)maxSpeed / (2.0 * decel);
     7e0:	b8 01       	movw	r22, r16
     7e2:	88 27       	eor	r24, r24
     7e4:	77 fd       	sbrc	r23, 7
     7e6:	80 95       	com	r24
     7e8:	98 2f       	mov	r25, r24
     7ea:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     7ee:	9b 01       	movw	r18, r22
     7f0:	ac 01       	movw	r20, r24
     7f2:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	b6 01       	movw	r22, r12
     7fc:	88 27       	eor	r24, r24
     7fe:	77 fd       	sbrc	r23, 7
     800:	80 95       	com	r24
     802:	98 2f       	mov	r25, r24
     804:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     808:	9b 01       	movw	r18, r22
     80a:	ac 01       	movw	r20, r24
     80c:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3>
     810:	9b 01       	movw	r18, r22
     812:	ac 01       	movw	r20, r24
     814:	c8 01       	movw	r24, r16
     816:	b7 01       	movw	r22, r14
     818:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     81c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixsfsi>
     820:	79 8b       	std	Y+17, r23	; 0x11
     822:	68 8b       	std	Y+16, r22	; 0x10
}
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	08 95       	ret

00000836 <motorStillRunning>:

int motorStillRunning(struct StepperMotor *motor)
{	
     836:	fc 01       	movw	r30, r24
	if(motor->stepAccel == 0)
     838:	82 85       	ldd	r24, Z+10	; 0x0a
     83a:	93 85       	ldd	r25, Z+11	; 0x0b
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	89 2b       	or	r24, r25
     842:	11 f4       	brne	.+4      	; 0x848 <motorStillRunning+0x12>
     844:	21 e0       	ldi	r18, 0x01	; 1
     846:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	else
		return 0;
}
     848:	c9 01       	movw	r24, r18
     84a:	08 95       	ret

0000084c <setAccel>:
	printlnNum((float)leftMotor.stepCount);
	
}

void setAccel(struct StepperMotor *motor, int inSpeed, int maxSpeed, int accel)
{
     84c:	2f 92       	push	r2
     84e:	3f 92       	push	r3
     850:	4f 92       	push	r4
     852:	5f 92       	push	r5
     854:	6f 92       	push	r6
     856:	7f 92       	push	r7
     858:	8f 92       	push	r8
     85a:	9f 92       	push	r9
     85c:	af 92       	push	r10
     85e:	bf 92       	push	r11
     860:	cf 92       	push	r12
     862:	df 92       	push	r13
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	df 93       	push	r29
     86e:	cf 93       	push	r28
     870:	00 d0       	rcall	.+0      	; 0x872 <setAccel+0x26>
     872:	00 d0       	rcall	.+0      	; 0x874 <setAccel+0x28>
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	1c 01       	movw	r2, r24
     87a:	3b 01       	movw	r6, r22
     87c:	7a 01       	movw	r14, r20
     87e:	59 01       	movw	r10, r18
	motor->targetDelay = TIMER_FREQUENCY / maxSpeed;	
     880:	00 27       	eor	r16, r16
     882:	f7 fc       	sbrc	r15, 7
     884:	00 95       	com	r16
     886:	10 2f       	mov	r17, r16
     888:	60 e9       	ldi	r22, 0x90	; 144
     88a:	70 ed       	ldi	r23, 0xD0	; 208
     88c:	83 e0       	ldi	r24, 0x03	; 3
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	a8 01       	movw	r20, r16
     892:	97 01       	movw	r18, r14
     894:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__divmodsi4>
     898:	ca 01       	movw	r24, r20
     89a:	b9 01       	movw	r22, r18
     89c:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     8a0:	f1 01       	movw	r30, r2
     8a2:	64 87       	std	Z+12, r22	; 0x0c
     8a4:	75 87       	std	Z+13, r23	; 0x0d
     8a6:	86 87       	std	Z+14, r24	; 0x0e
     8a8:	97 87       	std	Z+15, r25	; 0x0f
	motor->tempCount = 0;
     8aa:	11 8a       	std	Z+17, r1	; 0x11
     8ac:	10 8a       	std	Z+16, r1	; 0x10
	motor->currentStepDelay = 0.676 * TIMER_FREQUENCY * sqrt(2.0 / (float)accel);
     8ae:	cc 24       	eor	r12, r12
     8b0:	b7 fc       	sbrc	r11, 7
     8b2:	c0 94       	com	r12
     8b4:	dc 2c       	mov	r13, r12
     8b6:	c6 01       	movw	r24, r12
     8b8:	b5 01       	movw	r22, r10
     8ba:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     8be:	5b 01       	movw	r10, r22
     8c0:	6c 01       	movw	r12, r24
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e4       	ldi	r25, 0x40	; 64
     8ca:	a6 01       	movw	r20, r12
     8cc:	95 01       	movw	r18, r10
     8ce:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     8d2:	0e 94 a4 0b 	call	0x1748	; 0x1748 <sqrt>
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	3a e0       	ldi	r19, 0x0A	; 10
     8da:	45 e2       	ldi	r20, 0x25	; 37
     8dc:	58 e4       	ldi	r21, 0x48	; 72
     8de:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     8e2:	f1 01       	movw	r30, r2
     8e4:	64 83       	std	Z+4, r22	; 0x04
     8e6:	75 83       	std	Z+5, r23	; 0x05
     8e8:	86 83       	std	Z+6, r24	; 0x06
     8ea:	97 83       	std	Z+7, r25	; 0x07

	for(int i = 0; i < (float)inSpeed * (float)inSpeed / (2.0 * (float)accel); i++)
     8ec:	88 24       	eor	r8, r8
     8ee:	77 fc       	sbrc	r7, 7
     8f0:	80 94       	com	r8
     8f2:	98 2c       	mov	r9, r8
     8f4:	c4 01       	movw	r24, r8
     8f6:	b3 01       	movw	r22, r6
     8f8:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     8fc:	9b 01       	movw	r18, r22
     8fe:	ac 01       	movw	r20, r24
     900:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     904:	7b 01       	movw	r14, r22
     906:	8c 01       	movw	r16, r24
     908:	c6 01       	movw	r24, r12
     90a:	b5 01       	movw	r22, r10
     90c:	a6 01       	movw	r20, r12
     90e:	95 01       	movw	r18, r10
     910:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3>
     914:	9b 01       	movw	r18, r22
     916:	ac 01       	movw	r20, r24
     918:	c8 01       	movw	r24, r16
     91a:	b7 01       	movw	r22, r14
     91c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     920:	69 83       	std	Y+1, r22	; 0x01
     922:	7a 83       	std	Y+2, r23	; 0x02
     924:	8b 83       	std	Y+3, r24	; 0x03
     926:	9c 83       	std	Y+4, r25	; 0x04
     928:	44 24       	eor	r4, r4
     92a:	55 24       	eor	r5, r5
     92c:	40 c0       	rjmp	.+128    	; 0x9ae <__stack+0xaf>
	{
		motor->tempCount++;
     92e:	f1 01       	movw	r30, r2
     930:	80 89       	ldd	r24, Z+16	; 0x10
     932:	91 89       	ldd	r25, Z+17	; 0x11
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	91 8b       	std	Z+17, r25	; 0x11
     938:	80 8b       	std	Z+16, r24	; 0x10
		motor->currentStepDelay -= (float)(2.0 * motor->currentStepDelay) / (float)(4.0 * 	motor->tempCount + 1);
     93a:	64 80       	ldd	r6, Z+4	; 0x04
     93c:	75 80       	ldd	r7, Z+5	; 0x05
     93e:	86 80       	ldd	r8, Z+6	; 0x06
     940:	97 80       	ldd	r9, Z+7	; 0x07
     942:	64 81       	ldd	r22, Z+4	; 0x04
     944:	75 81       	ldd	r23, Z+5	; 0x05
     946:	86 81       	ldd	r24, Z+6	; 0x06
     948:	97 81       	ldd	r25, Z+7	; 0x07
     94a:	e0 88       	ldd	r14, Z+16	; 0x10
     94c:	f1 88       	ldd	r15, Z+17	; 0x11
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	50 ec       	ldi	r21, 0xC0	; 192
     956:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     95a:	5b 01       	movw	r10, r22
     95c:	6c 01       	movw	r12, r24
     95e:	00 27       	eor	r16, r16
     960:	f7 fc       	sbrc	r15, 7
     962:	00 95       	com	r16
     964:	10 2f       	mov	r17, r16
     966:	c8 01       	movw	r24, r16
     968:	b7 01       	movw	r22, r14
     96a:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	40 e8       	ldi	r20, 0x80	; 128
     974:	50 e4       	ldi	r21, 0x40	; 64
     976:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e8       	ldi	r20, 0x80	; 128
     980:	5f e3       	ldi	r21, 0x3F	; 63
     982:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3>
     986:	9b 01       	movw	r18, r22
     988:	ac 01       	movw	r20, r24
     98a:	c6 01       	movw	r24, r12
     98c:	b5 01       	movw	r22, r10
     98e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     992:	9b 01       	movw	r18, r22
     994:	ac 01       	movw	r20, r24
     996:	c4 01       	movw	r24, r8
     998:	b3 01       	movw	r22, r6
     99a:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3>
     99e:	f1 01       	movw	r30, r2
     9a0:	64 83       	std	Z+4, r22	; 0x04
     9a2:	75 83       	std	Z+5, r23	; 0x05
     9a4:	86 83       	std	Z+6, r24	; 0x06
     9a6:	97 83       	std	Z+7, r25	; 0x07
{
	motor->targetDelay = TIMER_FREQUENCY / maxSpeed;	
	motor->tempCount = 0;
	motor->currentStepDelay = 0.676 * TIMER_FREQUENCY * sqrt(2.0 / (float)accel);

	for(int i = 0; i < (float)inSpeed * (float)inSpeed / (2.0 * (float)accel); i++)
     9a8:	08 94       	sec
     9aa:	41 1c       	adc	r4, r1
     9ac:	51 1c       	adc	r5, r1
     9ae:	b2 01       	movw	r22, r4
     9b0:	88 27       	eor	r24, r24
     9b2:	77 fd       	sbrc	r23, 7
     9b4:	80 95       	com	r24
     9b6:	98 2f       	mov	r25, r24
     9b8:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     9bc:	29 81       	ldd	r18, Y+1	; 0x01
     9be:	3a 81       	ldd	r19, Y+2	; 0x02
     9c0:	4b 81       	ldd	r20, Y+3	; 0x03
     9c2:	5c 81       	ldd	r21, Y+4	; 0x04
     9c4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__cmpsf2>
     9c8:	87 fd       	sbrc	r24, 7
     9ca:	b1 cf       	rjmp	.-158    	; 0x92e <__stack+0x2f>
	{
		motor->tempCount++;
		motor->currentStepDelay -= (float)(2.0 * motor->currentStepDelay) / (float)(4.0 * 	motor->tempCount + 1);
	}	
	
}
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	cf 91       	pop	r28
     9d6:	df 91       	pop	r29
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	ff 90       	pop	r15
     9de:	ef 90       	pop	r14
     9e0:	df 90       	pop	r13
     9e2:	cf 90       	pop	r12
     9e4:	bf 90       	pop	r11
     9e6:	af 90       	pop	r10
     9e8:	9f 90       	pop	r9
     9ea:	8f 90       	pop	r8
     9ec:	7f 90       	pop	r7
     9ee:	6f 90       	pop	r6
     9f0:	5f 90       	pop	r5
     9f2:	4f 90       	pop	r4
     9f4:	3f 90       	pop	r3
     9f6:	2f 90       	pop	r2
     9f8:	08 95       	ret

000009fa <straight>:

extern StepperMotor leftMotor;
extern StepperMotor rightMotor;

void straight(long stepTarget, int inSpeed, int maxSpeed, int exitSpeed, int accel, int decel)
{	
     9fa:	2f 92       	push	r2
     9fc:	3f 92       	push	r3
     9fe:	4f 92       	push	r4
     a00:	5f 92       	push	r5
     a02:	6f 92       	push	r6
     a04:	7f 92       	push	r7
     a06:	8f 92       	push	r8
     a08:	9f 92       	push	r9
     a0a:	af 92       	push	r10
     a0c:	bf 92       	push	r11
     a0e:	cf 92       	push	r12
     a10:	df 92       	push	r13
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	df 93       	push	r29
     a1c:	cf 93       	push	r28
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	2a 97       	sbiw	r28, 0x0a	; 10
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	cd bf       	out	0x3d, r28	; 61
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	5a 01       	movw	r10, r20
     a38:	3a 87       	std	Y+10, r19	; 0x0a
     a3a:	29 87       	std	Y+9, r18	; 0x09
     a3c:	1e 83       	std	Y+6, r17	; 0x06
     a3e:	0d 83       	std	Y+5, r16	; 0x05
     a40:	d8 86       	std	Y+8, r13	; 0x08
     a42:	cf 82       	std	Y+7, r12	; 0x07
	//Set Acceleration
	setAccel(&leftMotor, inSpeed, maxSpeed, accel);
     a44:	88 e1       	ldi	r24, 0x18	; 24
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	ba 01       	movw	r22, r20
     a4a:	a9 01       	movw	r20, r18
     a4c:	97 01       	movw	r18, r14
     a4e:	0e 94 26 04 	call	0x84c	; 0x84c <setAccel>
	setAccel(&rightMotor, inSpeed, maxSpeed, accel);
     a52:	86 e0       	ldi	r24, 0x06	; 6
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	b5 01       	movw	r22, r10
     a58:	49 85       	ldd	r20, Y+9	; 0x09
     a5a:	5a 85       	ldd	r21, Y+10	; 0x0a
     a5c:	97 01       	movw	r18, r14
     a5e:	0e 94 26 04 	call	0x84c	; 0x84c <setAccel>
	
	turnOnTimers(1, 1);	
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	61 e0       	ldi	r22, 0x01	; 1
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	0e 94 22 03 	call	0x644	; 0x644 <turnOnTimers>
	enableDrive(1, 1);
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	61 e0       	ldi	r22, 0x01	; 1
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	0e 94 ed 01 	call	0x3da	; 0x3da <enableDrive>
	motor->tempCount = (float)maxSpeed * (float)maxSpeed / (2.0 * decel);
}

int motorStillRunning(struct StepperMotor *motor)
{	
	if(motor->stepAccel == 0)
     a7a:	80 91 22 01 	lds	r24, 0x0122
     a7e:	90 91 23 01 	lds	r25, 0x0123
     a82:	89 2b       	or	r24, r25
     a84:	d1 f3       	breq	.-12     	; 0xa7a <straight+0x80>
     a86:	39 c0       	rjmp	.+114    	; 0xafa <straight+0x100>
	while(motorStillRunning(&leftMotor));
	
	//Calculate when to start decelerating
	float decelSteps = (float)maxSpeed * (float)maxSpeed / (2.0 * decel) - (float)exitSpeed * (float)exitSpeed / (2.0 * decel);
	
	while(leftMotor.stepCount + decelSteps < stepTarget);
     a88:	60 91 18 01 	lds	r22, 0x0118
     a8c:	70 91 19 01 	lds	r23, 0x0119
     a90:	80 91 1a 01 	lds	r24, 0x011A
     a94:	90 91 1b 01 	lds	r25, 0x011B
     a98:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     a9c:	a6 01       	movw	r20, r12
     a9e:	95 01       	movw	r18, r10
     aa0:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3>
     aa4:	7b 01       	movw	r14, r22
     aa6:	8c 01       	movw	r16, r24
     aa8:	69 81       	ldd	r22, Y+1	; 0x01
     aaa:	7a 81       	ldd	r23, Y+2	; 0x02
     aac:	8b 81       	ldd	r24, Y+3	; 0x03
     aae:	9c 81       	ldd	r25, Y+4	; 0x04
     ab0:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     ab4:	9b 01       	movw	r18, r22
     ab6:	ac 01       	movw	r20, r24
     ab8:	c8 01       	movw	r24, r16
     aba:	b7 01       	movw	r22, r14
     abc:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__cmpsf2>
     ac0:	87 fd       	sbrc	r24, 7
     ac2:	e2 cf       	rjmp	.-60     	; 0xa88 <straight+0x8e>
	
	//Set Deceleration
	setDecel(&leftMotor, maxSpeed, exitSpeed, decel);
     ac4:	88 e1       	ldi	r24, 0x18	; 24
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	69 85       	ldd	r22, Y+9	; 0x09
     aca:	7a 85       	ldd	r23, Y+10	; 0x0a
     acc:	4d 81       	ldd	r20, Y+5	; 0x05
     ace:	5e 81       	ldd	r21, Y+6	; 0x06
     ad0:	2f 81       	ldd	r18, Y+7	; 0x07
     ad2:	38 85       	ldd	r19, Y+8	; 0x08
     ad4:	0e 94 c3 03 	call	0x786	; 0x786 <setDecel>
	setDecel(&rightMotor, maxSpeed, exitSpeed, decel);
     ad8:	86 e0       	ldi	r24, 0x06	; 6
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	69 85       	ldd	r22, Y+9	; 0x09
     ade:	7a 85       	ldd	r23, Y+10	; 0x0a
     ae0:	4d 81       	ldd	r20, Y+5	; 0x05
     ae2:	5e 81       	ldd	r21, Y+6	; 0x06
     ae4:	2f 81       	ldd	r18, Y+7	; 0x07
     ae6:	38 85       	ldd	r19, Y+8	; 0x08
     ae8:	0e 94 c3 03 	call	0x786	; 0x786 <setDecel>
	motor->tempCount = (float)maxSpeed * (float)maxSpeed / (2.0 * decel);
}

int motorStillRunning(struct StepperMotor *motor)
{	
	if(motor->stepAccel == 0)
     aec:	80 91 22 01 	lds	r24, 0x0122
     af0:	90 91 23 01 	lds	r25, 0x0123
     af4:	89 2b       	or	r24, r25
     af6:	d1 f3       	breq	.-12     	; 0xaec <straight+0xf2>
     af8:	56 c0       	rjmp	.+172    	; 0xba6 <straight+0x1ac>
	enableDrive(1, 1);
	
	while(motorStillRunning(&leftMotor));
	
	//Calculate when to start decelerating
	float decelSteps = (float)maxSpeed * (float)maxSpeed / (2.0 * decel) - (float)exitSpeed * (float)exitSpeed / (2.0 * decel);
     afa:	29 85       	ldd	r18, Y+9	; 0x09
     afc:	3a 85       	ldd	r19, Y+10	; 0x0a
     afe:	b9 01       	movw	r22, r18
     b00:	88 27       	eor	r24, r24
     b02:	77 fd       	sbrc	r23, 7
     b04:	80 95       	com	r24
     b06:	98 2f       	mov	r25, r24
     b08:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     b0c:	7b 01       	movw	r14, r22
     b0e:	8c 01       	movw	r16, r24
     b10:	ef 81       	ldd	r30, Y+7	; 0x07
     b12:	f8 85       	ldd	r31, Y+8	; 0x08
     b14:	bf 01       	movw	r22, r30
     b16:	88 27       	eor	r24, r24
     b18:	77 fd       	sbrc	r23, 7
     b1a:	80 95       	com	r24
     b1c:	98 2f       	mov	r25, r24
     b1e:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     b22:	5b 01       	movw	r10, r22
     b24:	6c 01       	movw	r12, r24
     b26:	2d 81       	ldd	r18, Y+5	; 0x05
     b28:	3e 81       	ldd	r19, Y+6	; 0x06
     b2a:	b9 01       	movw	r22, r18
     b2c:	88 27       	eor	r24, r24
     b2e:	77 fd       	sbrc	r23, 7
     b30:	80 95       	com	r24
     b32:	98 2f       	mov	r25, r24
     b34:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     b38:	3b 01       	movw	r6, r22
     b3a:	4c 01       	movw	r8, r24
     b3c:	c8 01       	movw	r24, r16
     b3e:	b7 01       	movw	r22, r14
     b40:	a8 01       	movw	r20, r16
     b42:	97 01       	movw	r18, r14
     b44:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     b48:	7b 01       	movw	r14, r22
     b4a:	8c 01       	movw	r16, r24
     b4c:	c6 01       	movw	r24, r12
     b4e:	b5 01       	movw	r22, r10
     b50:	a6 01       	movw	r20, r12
     b52:	95 01       	movw	r18, r10
     b54:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3>
     b58:	9b 01       	movw	r18, r22
     b5a:	ac 01       	movw	r20, r24
     b5c:	c8 01       	movw	r24, r16
     b5e:	b7 01       	movw	r22, r14
     b60:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     b64:	1b 01       	movw	r2, r22
     b66:	2c 01       	movw	r4, r24
     b68:	c4 01       	movw	r24, r8
     b6a:	b3 01       	movw	r22, r6
     b6c:	a4 01       	movw	r20, r8
     b6e:	93 01       	movw	r18, r6
     b70:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     b74:	7b 01       	movw	r14, r22
     b76:	8c 01       	movw	r16, r24
     b78:	c6 01       	movw	r24, r12
     b7a:	b5 01       	movw	r22, r10
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	40 e0       	ldi	r20, 0x00	; 0
     b82:	50 ec       	ldi	r21, 0xC0	; 192
     b84:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     b88:	9b 01       	movw	r18, r22
     b8a:	ac 01       	movw	r20, r24
     b8c:	c8 01       	movw	r24, r16
     b8e:	b7 01       	movw	r22, r14
     b90:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     b94:	9b 01       	movw	r18, r22
     b96:	ac 01       	movw	r20, r24
     b98:	c2 01       	movw	r24, r4
     b9a:	b1 01       	movw	r22, r2
     b9c:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3>
     ba0:	5b 01       	movw	r10, r22
     ba2:	6c 01       	movw	r12, r24
     ba4:	71 cf       	rjmp	.-286    	; 0xa88 <straight+0x8e>
	//Set Deceleration
	setDecel(&leftMotor, maxSpeed, exitSpeed, decel);
	setDecel(&rightMotor, maxSpeed, exitSpeed, decel);
	
	while(motorStillRunning(&leftMotor));
	turnOnTimers(0, 0);
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	0e 94 22 03 	call	0x644	; 0x644 <turnOnTimers>
	printlnNum((float)leftMotor.stepCount);
     bb2:	60 91 18 01 	lds	r22, 0x0118
     bb6:	70 91 19 01 	lds	r23, 0x0119
     bba:	80 91 1a 01 	lds	r24, 0x011A
     bbe:	90 91 1b 01 	lds	r25, 0x011B
     bc2:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     bc6:	0e 94 90 03 	call	0x720	; 0x720 <printlnNum>
	
}
     bca:	2a 96       	adiw	r28, 0x0a	; 10
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	cd bf       	out	0x3d, r28	; 61
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	cf 90       	pop	r12
     be6:	bf 90       	pop	r11
     be8:	af 90       	pop	r10
     bea:	9f 90       	pop	r9
     bec:	8f 90       	pop	r8
     bee:	7f 90       	pop	r7
     bf0:	6f 90       	pop	r6
     bf2:	5f 90       	pop	r5
     bf4:	4f 90       	pop	r4
     bf6:	3f 90       	pop	r3
     bf8:	2f 90       	pop	r2
     bfa:	08 95       	ret

00000bfc <vfprintf>:
     bfc:	a1 e1       	ldi	r26, 0x11	; 17
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e4 e0       	ldi	r30, 0x04	; 4
     c02:	f6 e0       	ldi	r31, 0x06	; 6
     c04:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__prologue_saves__>
     c08:	3c 01       	movw	r6, r24
     c0a:	7f 87       	std	Y+15, r23	; 0x0f
     c0c:	6e 87       	std	Y+14, r22	; 0x0e
     c0e:	6a 01       	movw	r12, r20
     c10:	fc 01       	movw	r30, r24
     c12:	17 82       	std	Z+7, r1	; 0x07
     c14:	16 82       	std	Z+6, r1	; 0x06
     c16:	83 81       	ldd	r24, Z+3	; 0x03
     c18:	81 fd       	sbrc	r24, 1
     c1a:	03 c0       	rjmp	.+6      	; 0xc22 <vfprintf+0x26>
     c1c:	6f ef       	ldi	r22, 0xFF	; 255
     c1e:	7f ef       	ldi	r23, 0xFF	; 255
     c20:	6f c3       	rjmp	.+1758   	; 0x1300 <vfprintf+0x704>
     c22:	9e 01       	movw	r18, r28
     c24:	2f 5f       	subi	r18, 0xFF	; 255
     c26:	3f 4f       	sbci	r19, 0xFF	; 255
     c28:	39 8b       	std	Y+17, r19	; 0x11
     c2a:	28 8b       	std	Y+16, r18	; 0x10
     c2c:	f3 01       	movw	r30, r6
     c2e:	23 81       	ldd	r18, Z+3	; 0x03
     c30:	ee 85       	ldd	r30, Y+14	; 0x0e
     c32:	ff 85       	ldd	r31, Y+15	; 0x0f
     c34:	23 fd       	sbrc	r18, 3
     c36:	85 91       	lpm	r24, Z+
     c38:	23 ff       	sbrs	r18, 3
     c3a:	81 91       	ld	r24, Z+
     c3c:	ff 87       	std	Y+15, r31	; 0x0f
     c3e:	ee 87       	std	Y+14, r30	; 0x0e
     c40:	88 23       	and	r24, r24
     c42:	09 f4       	brne	.+2      	; 0xc46 <vfprintf+0x4a>
     c44:	5a c3       	rjmp	.+1716   	; 0x12fa <vfprintf+0x6fe>
     c46:	85 32       	cpi	r24, 0x25	; 37
     c48:	51 f4       	brne	.+20     	; 0xc5e <vfprintf+0x62>
     c4a:	ee 85       	ldd	r30, Y+14	; 0x0e
     c4c:	ff 85       	ldd	r31, Y+15	; 0x0f
     c4e:	23 fd       	sbrc	r18, 3
     c50:	85 91       	lpm	r24, Z+
     c52:	23 ff       	sbrs	r18, 3
     c54:	81 91       	ld	r24, Z+
     c56:	ff 87       	std	Y+15, r31	; 0x0f
     c58:	ee 87       	std	Y+14, r30	; 0x0e
     c5a:	85 32       	cpi	r24, 0x25	; 37
     c5c:	29 f4       	brne	.+10     	; 0xc68 <vfprintf+0x6c>
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	b3 01       	movw	r22, r6
     c62:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
     c66:	e2 cf       	rjmp	.-60     	; 0xc2c <vfprintf+0x30>
     c68:	98 2f       	mov	r25, r24
     c6a:	10 e0       	ldi	r17, 0x00	; 0
     c6c:	88 24       	eor	r8, r8
     c6e:	99 24       	eor	r9, r9
     c70:	10 32       	cpi	r17, 0x20	; 32
     c72:	b0 f4       	brcc	.+44     	; 0xca0 <vfprintf+0xa4>
     c74:	9b 32       	cpi	r25, 0x2B	; 43
     c76:	69 f0       	breq	.+26     	; 0xc92 <vfprintf+0x96>
     c78:	9c 32       	cpi	r25, 0x2C	; 44
     c7a:	28 f4       	brcc	.+10     	; 0xc86 <vfprintf+0x8a>
     c7c:	90 32       	cpi	r25, 0x20	; 32
     c7e:	51 f0       	breq	.+20     	; 0xc94 <vfprintf+0x98>
     c80:	93 32       	cpi	r25, 0x23	; 35
     c82:	71 f4       	brne	.+28     	; 0xca0 <vfprintf+0xa4>
     c84:	0b c0       	rjmp	.+22     	; 0xc9c <vfprintf+0xa0>
     c86:	9d 32       	cpi	r25, 0x2D	; 45
     c88:	39 f0       	breq	.+14     	; 0xc98 <vfprintf+0x9c>
     c8a:	90 33       	cpi	r25, 0x30	; 48
     c8c:	49 f4       	brne	.+18     	; 0xca0 <vfprintf+0xa4>
     c8e:	11 60       	ori	r17, 0x01	; 1
     c90:	28 c0       	rjmp	.+80     	; 0xce2 <vfprintf+0xe6>
     c92:	12 60       	ori	r17, 0x02	; 2
     c94:	14 60       	ori	r17, 0x04	; 4
     c96:	25 c0       	rjmp	.+74     	; 0xce2 <vfprintf+0xe6>
     c98:	18 60       	ori	r17, 0x08	; 8
     c9a:	23 c0       	rjmp	.+70     	; 0xce2 <vfprintf+0xe6>
     c9c:	10 61       	ori	r17, 0x10	; 16
     c9e:	21 c0       	rjmp	.+66     	; 0xce2 <vfprintf+0xe6>
     ca0:	17 fd       	sbrc	r17, 7
     ca2:	2a c0       	rjmp	.+84     	; 0xcf8 <vfprintf+0xfc>
     ca4:	89 2f       	mov	r24, r25
     ca6:	80 53       	subi	r24, 0x30	; 48
     ca8:	8a 30       	cpi	r24, 0x0A	; 10
     caa:	78 f4       	brcc	.+30     	; 0xcca <vfprintf+0xce>
     cac:	16 ff       	sbrs	r17, 6
     cae:	06 c0       	rjmp	.+12     	; 0xcbc <vfprintf+0xc0>
     cb0:	fa e0       	ldi	r31, 0x0A	; 10
     cb2:	9f 9e       	mul	r9, r31
     cb4:	90 2c       	mov	r9, r0
     cb6:	11 24       	eor	r1, r1
     cb8:	98 0e       	add	r9, r24
     cba:	13 c0       	rjmp	.+38     	; 0xce2 <vfprintf+0xe6>
     cbc:	3a e0       	ldi	r19, 0x0A	; 10
     cbe:	83 9e       	mul	r8, r19
     cc0:	80 2c       	mov	r8, r0
     cc2:	11 24       	eor	r1, r1
     cc4:	88 0e       	add	r8, r24
     cc6:	10 62       	ori	r17, 0x20	; 32
     cc8:	0c c0       	rjmp	.+24     	; 0xce2 <vfprintf+0xe6>
     cca:	9e 32       	cpi	r25, 0x2E	; 46
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <vfprintf+0xda>
     cce:	16 fd       	sbrc	r17, 6
     cd0:	14 c3       	rjmp	.+1576   	; 0x12fa <vfprintf+0x6fe>
     cd2:	10 64       	ori	r17, 0x40	; 64
     cd4:	06 c0       	rjmp	.+12     	; 0xce2 <vfprintf+0xe6>
     cd6:	9c 36       	cpi	r25, 0x6C	; 108
     cd8:	11 f4       	brne	.+4      	; 0xcde <vfprintf+0xe2>
     cda:	10 68       	ori	r17, 0x80	; 128
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <vfprintf+0xe6>
     cde:	98 36       	cpi	r25, 0x68	; 104
     ce0:	59 f4       	brne	.+22     	; 0xcf8 <vfprintf+0xfc>
     ce2:	ee 85       	ldd	r30, Y+14	; 0x0e
     ce4:	ff 85       	ldd	r31, Y+15	; 0x0f
     ce6:	23 fd       	sbrc	r18, 3
     ce8:	95 91       	lpm	r25, Z+
     cea:	23 ff       	sbrs	r18, 3
     cec:	91 91       	ld	r25, Z+
     cee:	ff 87       	std	Y+15, r31	; 0x0f
     cf0:	ee 87       	std	Y+14, r30	; 0x0e
     cf2:	99 23       	and	r25, r25
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <vfprintf+0xfc>
     cf6:	bc cf       	rjmp	.-136    	; 0xc70 <vfprintf+0x74>
     cf8:	89 2f       	mov	r24, r25
     cfa:	85 54       	subi	r24, 0x45	; 69
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	20 f4       	brcc	.+8      	; 0xd08 <vfprintf+0x10c>
     d00:	81 2f       	mov	r24, r17
     d02:	80 61       	ori	r24, 0x10	; 16
     d04:	90 5e       	subi	r25, 0xE0	; 224
     d06:	07 c0       	rjmp	.+14     	; 0xd16 <vfprintf+0x11a>
     d08:	89 2f       	mov	r24, r25
     d0a:	85 56       	subi	r24, 0x65	; 101
     d0c:	83 30       	cpi	r24, 0x03	; 3
     d0e:	08 f0       	brcs	.+2      	; 0xd12 <vfprintf+0x116>
     d10:	9f c1       	rjmp	.+830    	; 0x1050 <vfprintf+0x454>
     d12:	81 2f       	mov	r24, r17
     d14:	8f 7e       	andi	r24, 0xEF	; 239
     d16:	86 fd       	sbrc	r24, 6
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <vfprintf+0x122>
     d1a:	76 e0       	ldi	r23, 0x06	; 6
     d1c:	97 2e       	mov	r9, r23
     d1e:	6f e3       	ldi	r22, 0x3F	; 63
     d20:	f6 2e       	mov	r15, r22
     d22:	f8 22       	and	r15, r24
     d24:	95 36       	cpi	r25, 0x65	; 101
     d26:	19 f4       	brne	.+6      	; 0xd2e <vfprintf+0x132>
     d28:	f0 e4       	ldi	r31, 0x40	; 64
     d2a:	ff 2a       	or	r15, r31
     d2c:	07 c0       	rjmp	.+14     	; 0xd3c <vfprintf+0x140>
     d2e:	96 36       	cpi	r25, 0x66	; 102
     d30:	19 f4       	brne	.+6      	; 0xd38 <vfprintf+0x13c>
     d32:	20 e8       	ldi	r18, 0x80	; 128
     d34:	f2 2a       	or	r15, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <vfprintf+0x140>
     d38:	91 10       	cpse	r9, r1
     d3a:	9a 94       	dec	r9
     d3c:	f7 fe       	sbrs	r15, 7
     d3e:	0a c0       	rjmp	.+20     	; 0xd54 <vfprintf+0x158>
     d40:	3b e3       	ldi	r19, 0x3B	; 59
     d42:	39 15       	cp	r19, r9
     d44:	18 f4       	brcc	.+6      	; 0xd4c <vfprintf+0x150>
     d46:	5c e3       	ldi	r21, 0x3C	; 60
     d48:	b5 2e       	mov	r11, r21
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <vfprintf+0x154>
     d4c:	b9 2c       	mov	r11, r9
     d4e:	b3 94       	inc	r11
     d50:	27 e0       	ldi	r18, 0x07	; 7
     d52:	09 c0       	rjmp	.+18     	; 0xd66 <vfprintf+0x16a>
     d54:	47 e0       	ldi	r20, 0x07	; 7
     d56:	49 15       	cp	r20, r9
     d58:	20 f4       	brcc	.+8      	; 0xd62 <vfprintf+0x166>
     d5a:	bb 24       	eor	r11, r11
     d5c:	47 e0       	ldi	r20, 0x07	; 7
     d5e:	94 2e       	mov	r9, r20
     d60:	f7 cf       	rjmp	.-18     	; 0xd50 <vfprintf+0x154>
     d62:	29 2d       	mov	r18, r9
     d64:	bb 24       	eor	r11, r11
     d66:	c6 01       	movw	r24, r12
     d68:	04 96       	adiw	r24, 0x04	; 4
     d6a:	9d 87       	std	Y+13, r25	; 0x0d
     d6c:	8c 87       	std	Y+12, r24	; 0x0c
     d6e:	f6 01       	movw	r30, r12
     d70:	60 81       	ld	r22, Z
     d72:	71 81       	ldd	r23, Z+1	; 0x01
     d74:	82 81       	ldd	r24, Z+2	; 0x02
     d76:	93 81       	ldd	r25, Z+3	; 0x03
     d78:	ae 01       	movw	r20, r28
     d7a:	4f 5f       	subi	r20, 0xFF	; 255
     d7c:	5f 4f       	sbci	r21, 0xFF	; 255
     d7e:	0b 2d       	mov	r16, r11
     d80:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__ftoa_engine>
     d84:	6c 01       	movw	r12, r24
     d86:	09 81       	ldd	r16, Y+1	; 0x01
     d88:	20 2e       	mov	r2, r16
     d8a:	33 24       	eor	r3, r3
     d8c:	00 ff       	sbrs	r16, 0
     d8e:	04 c0       	rjmp	.+8      	; 0xd98 <vfprintf+0x19c>
     d90:	03 fd       	sbrc	r16, 3
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <vfprintf+0x19c>
     d94:	1d e2       	ldi	r17, 0x2D	; 45
     d96:	09 c0       	rjmp	.+18     	; 0xdaa <vfprintf+0x1ae>
     d98:	f1 fe       	sbrs	r15, 1
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <vfprintf+0x1a4>
     d9c:	1b e2       	ldi	r17, 0x2B	; 43
     d9e:	05 c0       	rjmp	.+10     	; 0xdaa <vfprintf+0x1ae>
     da0:	f2 fc       	sbrc	r15, 2
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <vfprintf+0x1ac>
     da4:	10 e0       	ldi	r17, 0x00	; 0
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <vfprintf+0x1ae>
     da8:	10 e2       	ldi	r17, 0x20	; 32
     daa:	c1 01       	movw	r24, r2
     dac:	8c 70       	andi	r24, 0x0C	; 12
     dae:	90 70       	andi	r25, 0x00	; 0
     db0:	89 2b       	or	r24, r25
     db2:	b9 f1       	breq	.+110    	; 0xe22 <vfprintf+0x226>
     db4:	11 23       	and	r17, r17
     db6:	11 f4       	brne	.+4      	; 0xdbc <vfprintf+0x1c0>
     db8:	83 e0       	ldi	r24, 0x03	; 3
     dba:	01 c0       	rjmp	.+2      	; 0xdbe <vfprintf+0x1c2>
     dbc:	84 e0       	ldi	r24, 0x04	; 4
     dbe:	88 15       	cp	r24, r8
     dc0:	10 f0       	brcs	.+4      	; 0xdc6 <vfprintf+0x1ca>
     dc2:	88 24       	eor	r8, r8
     dc4:	0a c0       	rjmp	.+20     	; 0xdda <vfprintf+0x1de>
     dc6:	88 1a       	sub	r8, r24
     dc8:	f3 fc       	sbrc	r15, 3
     dca:	07 c0       	rjmp	.+14     	; 0xdda <vfprintf+0x1de>
     dcc:	80 e2       	ldi	r24, 0x20	; 32
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	b3 01       	movw	r22, r6
     dd2:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
     dd6:	8a 94       	dec	r8
     dd8:	c9 f7       	brne	.-14     	; 0xdcc <vfprintf+0x1d0>
     dda:	11 23       	and	r17, r17
     ddc:	29 f0       	breq	.+10     	; 0xde8 <vfprintf+0x1ec>
     dde:	81 2f       	mov	r24, r17
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	b3 01       	movw	r22, r6
     de4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
     de8:	23 fe       	sbrs	r2, 3
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <vfprintf+0x1f6>
     dec:	08 e6       	ldi	r16, 0x68	; 104
     dee:	10 e0       	ldi	r17, 0x00	; 0
     df0:	0e c0       	rjmp	.+28     	; 0xe0e <vfprintf+0x212>
     df2:	0c e6       	ldi	r16, 0x6C	; 108
     df4:	10 e0       	ldi	r17, 0x00	; 0
     df6:	0b c0       	rjmp	.+22     	; 0xe0e <vfprintf+0x212>
     df8:	e1 14       	cp	r14, r1
     dfa:	f1 04       	cpc	r15, r1
     dfc:	09 f0       	breq	.+2      	; 0xe00 <vfprintf+0x204>
     dfe:	80 52       	subi	r24, 0x20	; 32
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	b3 01       	movw	r22, r6
     e04:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
     e08:	0f 5f       	subi	r16, 0xFF	; 255
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <vfprintf+0x21c>
     e0e:	ef 2c       	mov	r14, r15
     e10:	ff 24       	eor	r15, r15
     e12:	f0 e1       	ldi	r31, 0x10	; 16
     e14:	ef 22       	and	r14, r31
     e16:	ff 24       	eor	r15, r15
     e18:	f8 01       	movw	r30, r16
     e1a:	84 91       	lpm	r24, Z+
     e1c:	88 23       	and	r24, r24
     e1e:	61 f7       	brne	.-40     	; 0xdf8 <vfprintf+0x1fc>
     e20:	14 c1       	rjmp	.+552    	; 0x104a <vfprintf+0x44e>
     e22:	f7 fe       	sbrs	r15, 7
     e24:	12 c0       	rjmp	.+36     	; 0xe4a <vfprintf+0x24e>
     e26:	bc 0c       	add	r11, r12
     e28:	24 fe       	sbrs	r2, 4
     e2a:	04 c0       	rjmp	.+8      	; 0xe34 <vfprintf+0x238>
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	81 33       	cpi	r24, 0x31	; 49
     e30:	09 f4       	brne	.+2      	; 0xe34 <vfprintf+0x238>
     e32:	ba 94       	dec	r11
     e34:	1b 14       	cp	r1, r11
     e36:	1c f0       	brlt	.+6      	; 0xe3e <vfprintf+0x242>
     e38:	bb 24       	eor	r11, r11
     e3a:	b3 94       	inc	r11
     e3c:	2d c0       	rjmp	.+90     	; 0xe98 <vfprintf+0x29c>
     e3e:	f8 e0       	ldi	r31, 0x08	; 8
     e40:	fb 15       	cp	r31, r11
     e42:	50 f5       	brcc	.+84     	; 0xe98 <vfprintf+0x29c>
     e44:	38 e0       	ldi	r19, 0x08	; 8
     e46:	b3 2e       	mov	r11, r19
     e48:	27 c0       	rjmp	.+78     	; 0xe98 <vfprintf+0x29c>
     e4a:	f6 fc       	sbrc	r15, 6
     e4c:	25 c0       	rjmp	.+74     	; 0xe98 <vfprintf+0x29c>
     e4e:	89 2d       	mov	r24, r9
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	8c 15       	cp	r24, r12
     e54:	9d 05       	cpc	r25, r13
     e56:	4c f0       	brlt	.+18     	; 0xe6a <vfprintf+0x26e>
     e58:	2c ef       	ldi	r18, 0xFC	; 252
     e5a:	c2 16       	cp	r12, r18
     e5c:	2f ef       	ldi	r18, 0xFF	; 255
     e5e:	d2 06       	cpc	r13, r18
     e60:	24 f0       	brlt	.+8      	; 0xe6a <vfprintf+0x26e>
     e62:	30 e8       	ldi	r19, 0x80	; 128
     e64:	f3 2a       	or	r15, r19
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <vfprintf+0x26e>
     e68:	9a 94       	dec	r9
     e6a:	99 20       	and	r9, r9
     e6c:	49 f0       	breq	.+18     	; 0xe80 <vfprintf+0x284>
     e6e:	e2 e0       	ldi	r30, 0x02	; 2
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	ec 0f       	add	r30, r28
     e74:	fd 1f       	adc	r31, r29
     e76:	e9 0d       	add	r30, r9
     e78:	f1 1d       	adc	r31, r1
     e7a:	80 81       	ld	r24, Z
     e7c:	80 33       	cpi	r24, 0x30	; 48
     e7e:	a1 f3       	breq	.-24     	; 0xe68 <vfprintf+0x26c>
     e80:	f7 fe       	sbrs	r15, 7
     e82:	0a c0       	rjmp	.+20     	; 0xe98 <vfprintf+0x29c>
     e84:	b9 2c       	mov	r11, r9
     e86:	b3 94       	inc	r11
     e88:	89 2d       	mov	r24, r9
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	c8 16       	cp	r12, r24
     e8e:	d9 06       	cpc	r13, r25
     e90:	14 f0       	brlt	.+4      	; 0xe96 <vfprintf+0x29a>
     e92:	99 24       	eor	r9, r9
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <vfprintf+0x29c>
     e96:	9c 18       	sub	r9, r12
     e98:	f7 fc       	sbrc	r15, 7
     e9a:	03 c0       	rjmp	.+6      	; 0xea2 <vfprintf+0x2a6>
     e9c:	25 e0       	ldi	r18, 0x05	; 5
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <vfprintf+0x2b8>
     ea2:	1c 14       	cp	r1, r12
     ea4:	1d 04       	cpc	r1, r13
     ea6:	1c f0       	brlt	.+6      	; 0xeae <vfprintf+0x2b2>
     ea8:	21 e0       	ldi	r18, 0x01	; 1
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	03 c0       	rjmp	.+6      	; 0xeb4 <vfprintf+0x2b8>
     eae:	96 01       	movw	r18, r12
     eb0:	2f 5f       	subi	r18, 0xFF	; 255
     eb2:	3f 4f       	sbci	r19, 0xFF	; 255
     eb4:	11 23       	and	r17, r17
     eb6:	11 f0       	breq	.+4      	; 0xebc <vfprintf+0x2c0>
     eb8:	2f 5f       	subi	r18, 0xFF	; 255
     eba:	3f 4f       	sbci	r19, 0xFF	; 255
     ebc:	99 20       	and	r9, r9
     ebe:	29 f0       	breq	.+10     	; 0xeca <vfprintf+0x2ce>
     ec0:	89 2d       	mov	r24, r9
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	28 0f       	add	r18, r24
     ec8:	39 1f       	adc	r19, r25
     eca:	88 2d       	mov	r24, r8
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	28 17       	cp	r18, r24
     ed0:	39 07       	cpc	r19, r25
     ed2:	14 f0       	brlt	.+4      	; 0xed8 <vfprintf+0x2dc>
     ed4:	88 24       	eor	r8, r8
     ed6:	01 c0       	rjmp	.+2      	; 0xeda <vfprintf+0x2de>
     ed8:	82 1a       	sub	r8, r18
     eda:	4f 2c       	mov	r4, r15
     edc:	55 24       	eor	r5, r5
     ede:	c2 01       	movw	r24, r4
     ee0:	89 70       	andi	r24, 0x09	; 9
     ee2:	90 70       	andi	r25, 0x00	; 0
     ee4:	89 2b       	or	r24, r25
     ee6:	39 f0       	breq	.+14     	; 0xef6 <vfprintf+0x2fa>
     ee8:	08 c0       	rjmp	.+16     	; 0xefa <vfprintf+0x2fe>
     eea:	80 e2       	ldi	r24, 0x20	; 32
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	b3 01       	movw	r22, r6
     ef0:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
     ef4:	8a 94       	dec	r8
     ef6:	88 20       	and	r8, r8
     ef8:	c1 f7       	brne	.-16     	; 0xeea <vfprintf+0x2ee>
     efa:	11 23       	and	r17, r17
     efc:	29 f0       	breq	.+10     	; 0xf08 <vfprintf+0x30c>
     efe:	81 2f       	mov	r24, r17
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	b3 01       	movw	r22, r6
     f04:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
     f08:	43 fe       	sbrs	r4, 3
     f0a:	07 c0       	rjmp	.+14     	; 0xf1a <vfprintf+0x31e>
     f0c:	08 c0       	rjmp	.+16     	; 0xf1e <vfprintf+0x322>
     f0e:	80 e3       	ldi	r24, 0x30	; 48
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	b3 01       	movw	r22, r6
     f14:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
     f18:	8a 94       	dec	r8
     f1a:	88 20       	and	r8, r8
     f1c:	c1 f7       	brne	.-16     	; 0xf0e <vfprintf+0x312>
     f1e:	f7 fe       	sbrs	r15, 7
     f20:	46 c0       	rjmp	.+140    	; 0xfae <vfprintf+0x3b2>
     f22:	86 01       	movw	r16, r12
     f24:	d7 fe       	sbrs	r13, 7
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <vfprintf+0x330>
     f28:	00 e0       	ldi	r16, 0x00	; 0
     f2a:	10 e0       	ldi	r17, 0x00	; 0
     f2c:	76 01       	movw	r14, r12
     f2e:	08 94       	sec
     f30:	e1 1c       	adc	r14, r1
     f32:	f1 1c       	adc	r15, r1
     f34:	e0 1a       	sub	r14, r16
     f36:	f1 0a       	sbc	r15, r17
     f38:	41 e0       	ldi	r20, 0x01	; 1
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	4c 0f       	add	r20, r28
     f3e:	5d 1f       	adc	r21, r29
     f40:	e4 0e       	add	r14, r20
     f42:	f5 1e       	adc	r15, r21
     f44:	26 01       	movw	r4, r12
     f46:	4b 18       	sub	r4, r11
     f48:	51 08       	sbc	r5, r1
     f4a:	89 2d       	mov	r24, r9
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	aa 24       	eor	r10, r10
     f50:	bb 24       	eor	r11, r11
     f52:	a8 1a       	sub	r10, r24
     f54:	b9 0a       	sbc	r11, r25
     f56:	5f ef       	ldi	r21, 0xFF	; 255
     f58:	0f 3f       	cpi	r16, 0xFF	; 255
     f5a:	15 07       	cpc	r17, r21
     f5c:	29 f4       	brne	.+10     	; 0xf68 <vfprintf+0x36c>
     f5e:	8e e2       	ldi	r24, 0x2E	; 46
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	b3 01       	movw	r22, r6
     f64:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
     f68:	c0 16       	cp	r12, r16
     f6a:	d1 06       	cpc	r13, r17
     f6c:	34 f0       	brlt	.+12     	; 0xf7a <vfprintf+0x37e>
     f6e:	40 16       	cp	r4, r16
     f70:	51 06       	cpc	r5, r17
     f72:	1c f4       	brge	.+6      	; 0xf7a <vfprintf+0x37e>
     f74:	f7 01       	movw	r30, r14
     f76:	80 81       	ld	r24, Z
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <vfprintf+0x380>
     f7a:	80 e3       	ldi	r24, 0x30	; 48
     f7c:	01 50       	subi	r16, 0x01	; 1
     f7e:	10 40       	sbci	r17, 0x00	; 0
     f80:	08 94       	sec
     f82:	e1 1c       	adc	r14, r1
     f84:	f1 1c       	adc	r15, r1
     f86:	0a 15       	cp	r16, r10
     f88:	1b 05       	cpc	r17, r11
     f8a:	2c f0       	brlt	.+10     	; 0xf96 <vfprintf+0x39a>
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	b3 01       	movw	r22, r6
     f90:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
     f94:	e0 cf       	rjmp	.-64     	; 0xf56 <vfprintf+0x35a>
     f96:	0c 15       	cp	r16, r12
     f98:	1d 05       	cpc	r17, r13
     f9a:	39 f4       	brne	.+14     	; 0xfaa <vfprintf+0x3ae>
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	96 33       	cpi	r25, 0x36	; 54
     fa0:	18 f4       	brcc	.+6      	; 0xfa8 <vfprintf+0x3ac>
     fa2:	95 33       	cpi	r25, 0x35	; 53
     fa4:	11 f4       	brne	.+4      	; 0xfaa <vfprintf+0x3ae>
     fa6:	24 fe       	sbrs	r2, 4
     fa8:	81 e3       	ldi	r24, 0x31	; 49
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	4b c0       	rjmp	.+150    	; 0x1044 <vfprintf+0x448>
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	81 33       	cpi	r24, 0x31	; 49
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <vfprintf+0x3ba>
     fb4:	0f 7e       	andi	r16, 0xEF	; 239
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	b3 01       	movw	r22, r6
     fba:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
     fbe:	99 20       	and	r9, r9
     fc0:	a1 f0       	breq	.+40     	; 0xfea <vfprintf+0x3ee>
     fc2:	8e e2       	ldi	r24, 0x2E	; 46
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	b3 01       	movw	r22, r6
     fc8:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
     fcc:	12 e0       	ldi	r17, 0x02	; 2
     fce:	e1 e0       	ldi	r30, 0x01	; 1
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	ec 0f       	add	r30, r28
     fd4:	fd 1f       	adc	r31, r29
     fd6:	e1 0f       	add	r30, r17
     fd8:	f1 1d       	adc	r31, r1
     fda:	1f 5f       	subi	r17, 0xFF	; 255
     fdc:	80 81       	ld	r24, Z
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	b3 01       	movw	r22, r6
     fe2:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
     fe6:	9a 94       	dec	r9
     fe8:	91 f7       	brne	.-28     	; 0xfce <vfprintf+0x3d2>
     fea:	44 fc       	sbrc	r4, 4
     fec:	03 c0       	rjmp	.+6      	; 0xff4 <vfprintf+0x3f8>
     fee:	85 e6       	ldi	r24, 0x65	; 101
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <vfprintf+0x3fc>
     ff4:	85 e4       	ldi	r24, 0x45	; 69
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	b3 01       	movw	r22, r6
     ffa:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
     ffe:	d7 fc       	sbrc	r13, 7
    1000:	05 c0       	rjmp	.+10     	; 0x100c <vfprintf+0x410>
    1002:	c1 14       	cp	r12, r1
    1004:	d1 04       	cpc	r13, r1
    1006:	41 f4       	brne	.+16     	; 0x1018 <vfprintf+0x41c>
    1008:	04 ff       	sbrs	r16, 4
    100a:	06 c0       	rjmp	.+12     	; 0x1018 <vfprintf+0x41c>
    100c:	d0 94       	com	r13
    100e:	c1 94       	neg	r12
    1010:	d1 08       	sbc	r13, r1
    1012:	d3 94       	inc	r13
    1014:	8d e2       	ldi	r24, 0x2D	; 45
    1016:	01 c0       	rjmp	.+2      	; 0x101a <vfprintf+0x41e>
    1018:	8b e2       	ldi	r24, 0x2B	; 43
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	b3 01       	movw	r22, r6
    101e:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
    1022:	80 e3       	ldi	r24, 0x30	; 48
    1024:	05 c0       	rjmp	.+10     	; 0x1030 <vfprintf+0x434>
    1026:	8f 5f       	subi	r24, 0xFF	; 255
    1028:	26 ef       	ldi	r18, 0xF6	; 246
    102a:	3f ef       	ldi	r19, 0xFF	; 255
    102c:	c2 0e       	add	r12, r18
    102e:	d3 1e       	adc	r13, r19
    1030:	3a e0       	ldi	r19, 0x0A	; 10
    1032:	c3 16       	cp	r12, r19
    1034:	d1 04       	cpc	r13, r1
    1036:	bc f7       	brge	.-18     	; 0x1026 <vfprintf+0x42a>
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	b3 01       	movw	r22, r6
    103c:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
    1040:	c6 01       	movw	r24, r12
    1042:	c0 96       	adiw	r24, 0x30	; 48
    1044:	b3 01       	movw	r22, r6
    1046:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
    104a:	cc 84       	ldd	r12, Y+12	; 0x0c
    104c:	dd 84       	ldd	r13, Y+13	; 0x0d
    104e:	52 c1       	rjmp	.+676    	; 0x12f4 <vfprintf+0x6f8>
    1050:	93 36       	cpi	r25, 0x63	; 99
    1052:	31 f0       	breq	.+12     	; 0x1060 <vfprintf+0x464>
    1054:	93 37       	cpi	r25, 0x73	; 115
    1056:	99 f0       	breq	.+38     	; 0x107e <vfprintf+0x482>
    1058:	93 35       	cpi	r25, 0x53	; 83
    105a:	09 f0       	breq	.+2      	; 0x105e <vfprintf+0x462>
    105c:	59 c0       	rjmp	.+178    	; 0x1110 <vfprintf+0x514>
    105e:	23 c0       	rjmp	.+70     	; 0x10a6 <vfprintf+0x4aa>
    1060:	f6 01       	movw	r30, r12
    1062:	80 81       	ld	r24, Z
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	5e 01       	movw	r10, r28
    1068:	08 94       	sec
    106a:	a1 1c       	adc	r10, r1
    106c:	b1 1c       	adc	r11, r1
    106e:	22 e0       	ldi	r18, 0x02	; 2
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	c2 0e       	add	r12, r18
    1074:	d3 1e       	adc	r13, r19
    1076:	21 e0       	ldi	r18, 0x01	; 1
    1078:	e2 2e       	mov	r14, r18
    107a:	f1 2c       	mov	r15, r1
    107c:	12 c0       	rjmp	.+36     	; 0x10a2 <vfprintf+0x4a6>
    107e:	f6 01       	movw	r30, r12
    1080:	a0 80       	ld	r10, Z
    1082:	b1 80       	ldd	r11, Z+1	; 0x01
    1084:	16 fd       	sbrc	r17, 6
    1086:	03 c0       	rjmp	.+6      	; 0x108e <vfprintf+0x492>
    1088:	6f ef       	ldi	r22, 0xFF	; 255
    108a:	7f ef       	ldi	r23, 0xFF	; 255
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <vfprintf+0x496>
    108e:	69 2d       	mov	r22, r9
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	22 e0       	ldi	r18, 0x02	; 2
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	c2 0e       	add	r12, r18
    1098:	d3 1e       	adc	r13, r19
    109a:	c5 01       	movw	r24, r10
    109c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <strnlen>
    10a0:	7c 01       	movw	r14, r24
    10a2:	1f 77       	andi	r17, 0x7F	; 127
    10a4:	13 c0       	rjmp	.+38     	; 0x10cc <vfprintf+0x4d0>
    10a6:	f6 01       	movw	r30, r12
    10a8:	a0 80       	ld	r10, Z
    10aa:	b1 80       	ldd	r11, Z+1	; 0x01
    10ac:	16 fd       	sbrc	r17, 6
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <vfprintf+0x4ba>
    10b0:	6f ef       	ldi	r22, 0xFF	; 255
    10b2:	7f ef       	ldi	r23, 0xFF	; 255
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <vfprintf+0x4be>
    10b6:	69 2d       	mov	r22, r9
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	22 e0       	ldi	r18, 0x02	; 2
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	c2 0e       	add	r12, r18
    10c0:	d3 1e       	adc	r13, r19
    10c2:	c5 01       	movw	r24, r10
    10c4:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <strnlen_P>
    10c8:	7c 01       	movw	r14, r24
    10ca:	10 68       	ori	r17, 0x80	; 128
    10cc:	13 ff       	sbrs	r17, 3
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <vfprintf+0x4e2>
    10d0:	1b c0       	rjmp	.+54     	; 0x1108 <vfprintf+0x50c>
    10d2:	80 e2       	ldi	r24, 0x20	; 32
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	b3 01       	movw	r22, r6
    10d8:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
    10dc:	8a 94       	dec	r8
    10de:	88 2d       	mov	r24, r8
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	e8 16       	cp	r14, r24
    10e4:	f9 06       	cpc	r15, r25
    10e6:	a8 f3       	brcs	.-22     	; 0x10d2 <vfprintf+0x4d6>
    10e8:	0f c0       	rjmp	.+30     	; 0x1108 <vfprintf+0x50c>
    10ea:	f5 01       	movw	r30, r10
    10ec:	17 fd       	sbrc	r17, 7
    10ee:	85 91       	lpm	r24, Z+
    10f0:	17 ff       	sbrs	r17, 7
    10f2:	81 91       	ld	r24, Z+
    10f4:	5f 01       	movw	r10, r30
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	b3 01       	movw	r22, r6
    10fa:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
    10fe:	81 10       	cpse	r8, r1
    1100:	8a 94       	dec	r8
    1102:	08 94       	sec
    1104:	e1 08       	sbc	r14, r1
    1106:	f1 08       	sbc	r15, r1
    1108:	e1 14       	cp	r14, r1
    110a:	f1 04       	cpc	r15, r1
    110c:	71 f7       	brne	.-36     	; 0x10ea <vfprintf+0x4ee>
    110e:	f2 c0       	rjmp	.+484    	; 0x12f4 <vfprintf+0x6f8>
    1110:	94 36       	cpi	r25, 0x64	; 100
    1112:	11 f0       	breq	.+4      	; 0x1118 <vfprintf+0x51c>
    1114:	99 36       	cpi	r25, 0x69	; 105
    1116:	89 f5       	brne	.+98     	; 0x117a <vfprintf+0x57e>
    1118:	17 ff       	sbrs	r17, 7
    111a:	08 c0       	rjmp	.+16     	; 0x112c <vfprintf+0x530>
    111c:	f6 01       	movw	r30, r12
    111e:	20 81       	ld	r18, Z
    1120:	31 81       	ldd	r19, Z+1	; 0x01
    1122:	42 81       	ldd	r20, Z+2	; 0x02
    1124:	53 81       	ldd	r21, Z+3	; 0x03
    1126:	84 e0       	ldi	r24, 0x04	; 4
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0a c0       	rjmp	.+20     	; 0x1140 <vfprintf+0x544>
    112c:	f6 01       	movw	r30, r12
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	9c 01       	movw	r18, r24
    1134:	44 27       	eor	r20, r20
    1136:	37 fd       	sbrc	r19, 7
    1138:	40 95       	com	r20
    113a:	54 2f       	mov	r21, r20
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	c8 0e       	add	r12, r24
    1142:	d9 1e       	adc	r13, r25
    1144:	9f e6       	ldi	r25, 0x6F	; 111
    1146:	f9 2e       	mov	r15, r25
    1148:	f1 22       	and	r15, r17
    114a:	57 ff       	sbrs	r21, 7
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <vfprintf+0x564>
    114e:	50 95       	com	r21
    1150:	40 95       	com	r20
    1152:	30 95       	com	r19
    1154:	21 95       	neg	r18
    1156:	3f 4f       	sbci	r19, 0xFF	; 255
    1158:	4f 4f       	sbci	r20, 0xFF	; 255
    115a:	5f 4f       	sbci	r21, 0xFF	; 255
    115c:	90 e8       	ldi	r25, 0x80	; 128
    115e:	f9 2a       	or	r15, r25
    1160:	ca 01       	movw	r24, r20
    1162:	b9 01       	movw	r22, r18
    1164:	ae 01       	movw	r20, r28
    1166:	4f 5f       	subi	r20, 0xFF	; 255
    1168:	5f 4f       	sbci	r21, 0xFF	; 255
    116a:	2a e0       	ldi	r18, 0x0A	; 10
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__ultoa_invert>
    1172:	e8 2e       	mov	r14, r24
    1174:	e8 89       	ldd	r30, Y+16	; 0x10
    1176:	ee 1a       	sub	r14, r30
    1178:	41 c0       	rjmp	.+130    	; 0x11fc <vfprintf+0x600>
    117a:	95 37       	cpi	r25, 0x75	; 117
    117c:	21 f4       	brne	.+8      	; 0x1186 <vfprintf+0x58a>
    117e:	1f 7e       	andi	r17, 0xEF	; 239
    1180:	2a e0       	ldi	r18, 0x0A	; 10
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	1c c0       	rjmp	.+56     	; 0x11be <vfprintf+0x5c2>
    1186:	19 7f       	andi	r17, 0xF9	; 249
    1188:	9f 36       	cpi	r25, 0x6F	; 111
    118a:	61 f0       	breq	.+24     	; 0x11a4 <vfprintf+0x5a8>
    118c:	90 37       	cpi	r25, 0x70	; 112
    118e:	20 f4       	brcc	.+8      	; 0x1198 <vfprintf+0x59c>
    1190:	98 35       	cpi	r25, 0x58	; 88
    1192:	09 f0       	breq	.+2      	; 0x1196 <vfprintf+0x59a>
    1194:	b2 c0       	rjmp	.+356    	; 0x12fa <vfprintf+0x6fe>
    1196:	0f c0       	rjmp	.+30     	; 0x11b6 <vfprintf+0x5ba>
    1198:	90 37       	cpi	r25, 0x70	; 112
    119a:	39 f0       	breq	.+14     	; 0x11aa <vfprintf+0x5ae>
    119c:	98 37       	cpi	r25, 0x78	; 120
    119e:	09 f0       	breq	.+2      	; 0x11a2 <vfprintf+0x5a6>
    11a0:	ac c0       	rjmp	.+344    	; 0x12fa <vfprintf+0x6fe>
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <vfprintf+0x5b0>
    11a4:	28 e0       	ldi	r18, 0x08	; 8
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	0a c0       	rjmp	.+20     	; 0x11be <vfprintf+0x5c2>
    11aa:	10 61       	ori	r17, 0x10	; 16
    11ac:	14 fd       	sbrc	r17, 4
    11ae:	14 60       	ori	r17, 0x04	; 4
    11b0:	20 e1       	ldi	r18, 0x10	; 16
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <vfprintf+0x5c2>
    11b6:	14 fd       	sbrc	r17, 4
    11b8:	16 60       	ori	r17, 0x06	; 6
    11ba:	20 e1       	ldi	r18, 0x10	; 16
    11bc:	32 e0       	ldi	r19, 0x02	; 2
    11be:	17 ff       	sbrs	r17, 7
    11c0:	08 c0       	rjmp	.+16     	; 0x11d2 <vfprintf+0x5d6>
    11c2:	f6 01       	movw	r30, r12
    11c4:	60 81       	ld	r22, Z
    11c6:	71 81       	ldd	r23, Z+1	; 0x01
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	44 e0       	ldi	r20, 0x04	; 4
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	08 c0       	rjmp	.+16     	; 0x11e2 <vfprintf+0x5e6>
    11d2:	f6 01       	movw	r30, r12
    11d4:	80 81       	ld	r24, Z
    11d6:	91 81       	ldd	r25, Z+1	; 0x01
    11d8:	bc 01       	movw	r22, r24
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	42 e0       	ldi	r20, 0x02	; 2
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	c4 0e       	add	r12, r20
    11e4:	d5 1e       	adc	r13, r21
    11e6:	ae 01       	movw	r20, r28
    11e8:	4f 5f       	subi	r20, 0xFF	; 255
    11ea:	5f 4f       	sbci	r21, 0xFF	; 255
    11ec:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__ultoa_invert>
    11f0:	e8 2e       	mov	r14, r24
    11f2:	58 89       	ldd	r21, Y+16	; 0x10
    11f4:	e5 1a       	sub	r14, r21
    11f6:	8f e7       	ldi	r24, 0x7F	; 127
    11f8:	f8 2e       	mov	r15, r24
    11fa:	f1 22       	and	r15, r17
    11fc:	f6 fe       	sbrs	r15, 6
    11fe:	0b c0       	rjmp	.+22     	; 0x1216 <vfprintf+0x61a>
    1200:	8e ef       	ldi	r24, 0xFE	; 254
    1202:	f8 22       	and	r15, r24
    1204:	e9 14       	cp	r14, r9
    1206:	38 f4       	brcc	.+14     	; 0x1216 <vfprintf+0x61a>
    1208:	f4 fe       	sbrs	r15, 4
    120a:	07 c0       	rjmp	.+14     	; 0x121a <vfprintf+0x61e>
    120c:	f2 fc       	sbrc	r15, 2
    120e:	05 c0       	rjmp	.+10     	; 0x121a <vfprintf+0x61e>
    1210:	9f ee       	ldi	r25, 0xEF	; 239
    1212:	f9 22       	and	r15, r25
    1214:	02 c0       	rjmp	.+4      	; 0x121a <vfprintf+0x61e>
    1216:	1e 2d       	mov	r17, r14
    1218:	01 c0       	rjmp	.+2      	; 0x121c <vfprintf+0x620>
    121a:	19 2d       	mov	r17, r9
    121c:	f4 fe       	sbrs	r15, 4
    121e:	0d c0       	rjmp	.+26     	; 0x123a <vfprintf+0x63e>
    1220:	fe 01       	movw	r30, r28
    1222:	ee 0d       	add	r30, r14
    1224:	f1 1d       	adc	r31, r1
    1226:	80 81       	ld	r24, Z
    1228:	80 33       	cpi	r24, 0x30	; 48
    122a:	19 f4       	brne	.+6      	; 0x1232 <vfprintf+0x636>
    122c:	e9 ee       	ldi	r30, 0xE9	; 233
    122e:	fe 22       	and	r15, r30
    1230:	08 c0       	rjmp	.+16     	; 0x1242 <vfprintf+0x646>
    1232:	1f 5f       	subi	r17, 0xFF	; 255
    1234:	f2 fe       	sbrs	r15, 2
    1236:	05 c0       	rjmp	.+10     	; 0x1242 <vfprintf+0x646>
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <vfprintf+0x644>
    123a:	8f 2d       	mov	r24, r15
    123c:	86 78       	andi	r24, 0x86	; 134
    123e:	09 f0       	breq	.+2      	; 0x1242 <vfprintf+0x646>
    1240:	1f 5f       	subi	r17, 0xFF	; 255
    1242:	0f 2d       	mov	r16, r15
    1244:	f3 fc       	sbrc	r15, 3
    1246:	14 c0       	rjmp	.+40     	; 0x1270 <vfprintf+0x674>
    1248:	f0 fe       	sbrs	r15, 0
    124a:	0f c0       	rjmp	.+30     	; 0x126a <vfprintf+0x66e>
    124c:	18 15       	cp	r17, r8
    124e:	10 f0       	brcs	.+4      	; 0x1254 <vfprintf+0x658>
    1250:	9e 2c       	mov	r9, r14
    1252:	0b c0       	rjmp	.+22     	; 0x126a <vfprintf+0x66e>
    1254:	9e 2c       	mov	r9, r14
    1256:	98 0c       	add	r9, r8
    1258:	91 1a       	sub	r9, r17
    125a:	18 2d       	mov	r17, r8
    125c:	06 c0       	rjmp	.+12     	; 0x126a <vfprintf+0x66e>
    125e:	80 e2       	ldi	r24, 0x20	; 32
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	b3 01       	movw	r22, r6
    1264:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
    1268:	1f 5f       	subi	r17, 0xFF	; 255
    126a:	18 15       	cp	r17, r8
    126c:	c0 f3       	brcs	.-16     	; 0x125e <vfprintf+0x662>
    126e:	04 c0       	rjmp	.+8      	; 0x1278 <vfprintf+0x67c>
    1270:	18 15       	cp	r17, r8
    1272:	10 f4       	brcc	.+4      	; 0x1278 <vfprintf+0x67c>
    1274:	81 1a       	sub	r8, r17
    1276:	01 c0       	rjmp	.+2      	; 0x127a <vfprintf+0x67e>
    1278:	88 24       	eor	r8, r8
    127a:	04 ff       	sbrs	r16, 4
    127c:	0f c0       	rjmp	.+30     	; 0x129c <vfprintf+0x6a0>
    127e:	80 e3       	ldi	r24, 0x30	; 48
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	b3 01       	movw	r22, r6
    1284:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
    1288:	02 ff       	sbrs	r16, 2
    128a:	1d c0       	rjmp	.+58     	; 0x12c6 <vfprintf+0x6ca>
    128c:	01 fd       	sbrc	r16, 1
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <vfprintf+0x69a>
    1290:	88 e7       	ldi	r24, 0x78	; 120
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e c0       	rjmp	.+28     	; 0x12b2 <vfprintf+0x6b6>
    1296:	88 e5       	ldi	r24, 0x58	; 88
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0b c0       	rjmp	.+22     	; 0x12b2 <vfprintf+0x6b6>
    129c:	80 2f       	mov	r24, r16
    129e:	86 78       	andi	r24, 0x86	; 134
    12a0:	91 f0       	breq	.+36     	; 0x12c6 <vfprintf+0x6ca>
    12a2:	01 ff       	sbrs	r16, 1
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <vfprintf+0x6ae>
    12a6:	8b e2       	ldi	r24, 0x2B	; 43
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <vfprintf+0x6b0>
    12aa:	80 e2       	ldi	r24, 0x20	; 32
    12ac:	f7 fc       	sbrc	r15, 7
    12ae:	8d e2       	ldi	r24, 0x2D	; 45
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	b3 01       	movw	r22, r6
    12b4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
    12b8:	06 c0       	rjmp	.+12     	; 0x12c6 <vfprintf+0x6ca>
    12ba:	80 e3       	ldi	r24, 0x30	; 48
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	b3 01       	movw	r22, r6
    12c0:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
    12c4:	9a 94       	dec	r9
    12c6:	e9 14       	cp	r14, r9
    12c8:	c0 f3       	brcs	.-16     	; 0x12ba <vfprintf+0x6be>
    12ca:	ea 94       	dec	r14
    12cc:	e1 e0       	ldi	r30, 0x01	; 1
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	ec 0f       	add	r30, r28
    12d2:	fd 1f       	adc	r31, r29
    12d4:	ee 0d       	add	r30, r14
    12d6:	f1 1d       	adc	r31, r1
    12d8:	80 81       	ld	r24, Z
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	b3 01       	movw	r22, r6
    12de:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
    12e2:	ee 20       	and	r14, r14
    12e4:	91 f7       	brne	.-28     	; 0x12ca <vfprintf+0x6ce>
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <vfprintf+0x6f8>
    12e8:	80 e2       	ldi	r24, 0x20	; 32
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	b3 01       	movw	r22, r6
    12ee:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <fputc>
    12f2:	8a 94       	dec	r8
    12f4:	88 20       	and	r8, r8
    12f6:	c1 f7       	brne	.-16     	; 0x12e8 <vfprintf+0x6ec>
    12f8:	99 cc       	rjmp	.-1742   	; 0xc2c <vfprintf+0x30>
    12fa:	f3 01       	movw	r30, r6
    12fc:	66 81       	ldd	r22, Z+6	; 0x06
    12fe:	77 81       	ldd	r23, Z+7	; 0x07
    1300:	cb 01       	movw	r24, r22
    1302:	61 96       	adiw	r28, 0x11	; 17
    1304:	e2 e1       	ldi	r30, 0x12	; 18
    1306:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__epilogue_restores__>

0000130a <__subsf3>:
    130a:	50 58       	subi	r21, 0x80	; 128

0000130c <__addsf3>:
    130c:	bb 27       	eor	r27, r27
    130e:	aa 27       	eor	r26, r26
    1310:	0e d0       	rcall	.+28     	; 0x132e <__addsf3x>
    1312:	75 c1       	rjmp	.+746    	; 0x15fe <__fp_round>
    1314:	66 d1       	rcall	.+716    	; 0x15e2 <__fp_pscA>
    1316:	30 f0       	brcs	.+12     	; 0x1324 <__addsf3+0x18>
    1318:	6b d1       	rcall	.+726    	; 0x15f0 <__fp_pscB>
    131a:	20 f0       	brcs	.+8      	; 0x1324 <__addsf3+0x18>
    131c:	31 f4       	brne	.+12     	; 0x132a <__addsf3+0x1e>
    131e:	9f 3f       	cpi	r25, 0xFF	; 255
    1320:	11 f4       	brne	.+4      	; 0x1326 <__addsf3+0x1a>
    1322:	1e f4       	brtc	.+6      	; 0x132a <__addsf3+0x1e>
    1324:	5b c1       	rjmp	.+694    	; 0x15dc <__fp_nan>
    1326:	0e f4       	brtc	.+2      	; 0x132a <__addsf3+0x1e>
    1328:	e0 95       	com	r30
    132a:	e7 fb       	bst	r30, 7
    132c:	51 c1       	rjmp	.+674    	; 0x15d0 <__fp_inf>

0000132e <__addsf3x>:
    132e:	e9 2f       	mov	r30, r25
    1330:	77 d1       	rcall	.+750    	; 0x1620 <__fp_split3>
    1332:	80 f3       	brcs	.-32     	; 0x1314 <__addsf3+0x8>
    1334:	ba 17       	cp	r27, r26
    1336:	62 07       	cpc	r22, r18
    1338:	73 07       	cpc	r23, r19
    133a:	84 07       	cpc	r24, r20
    133c:	95 07       	cpc	r25, r21
    133e:	18 f0       	brcs	.+6      	; 0x1346 <__addsf3x+0x18>
    1340:	71 f4       	brne	.+28     	; 0x135e <__addsf3x+0x30>
    1342:	9e f5       	brtc	.+102    	; 0x13aa <__addsf3x+0x7c>
    1344:	8f c1       	rjmp	.+798    	; 0x1664 <__fp_zero>
    1346:	0e f4       	brtc	.+2      	; 0x134a <__addsf3x+0x1c>
    1348:	e0 95       	com	r30
    134a:	0b 2e       	mov	r0, r27
    134c:	ba 2f       	mov	r27, r26
    134e:	a0 2d       	mov	r26, r0
    1350:	0b 01       	movw	r0, r22
    1352:	b9 01       	movw	r22, r18
    1354:	90 01       	movw	r18, r0
    1356:	0c 01       	movw	r0, r24
    1358:	ca 01       	movw	r24, r20
    135a:	a0 01       	movw	r20, r0
    135c:	11 24       	eor	r1, r1
    135e:	ff 27       	eor	r31, r31
    1360:	59 1b       	sub	r21, r25
    1362:	99 f0       	breq	.+38     	; 0x138a <__addsf3x+0x5c>
    1364:	59 3f       	cpi	r21, 0xF9	; 249
    1366:	50 f4       	brcc	.+20     	; 0x137c <__addsf3x+0x4e>
    1368:	50 3e       	cpi	r21, 0xE0	; 224
    136a:	68 f1       	brcs	.+90     	; 0x13c6 <__addsf3x+0x98>
    136c:	1a 16       	cp	r1, r26
    136e:	f0 40       	sbci	r31, 0x00	; 0
    1370:	a2 2f       	mov	r26, r18
    1372:	23 2f       	mov	r18, r19
    1374:	34 2f       	mov	r19, r20
    1376:	44 27       	eor	r20, r20
    1378:	58 5f       	subi	r21, 0xF8	; 248
    137a:	f3 cf       	rjmp	.-26     	; 0x1362 <__addsf3x+0x34>
    137c:	46 95       	lsr	r20
    137e:	37 95       	ror	r19
    1380:	27 95       	ror	r18
    1382:	a7 95       	ror	r26
    1384:	f0 40       	sbci	r31, 0x00	; 0
    1386:	53 95       	inc	r21
    1388:	c9 f7       	brne	.-14     	; 0x137c <__addsf3x+0x4e>
    138a:	7e f4       	brtc	.+30     	; 0x13aa <__addsf3x+0x7c>
    138c:	1f 16       	cp	r1, r31
    138e:	ba 0b       	sbc	r27, r26
    1390:	62 0b       	sbc	r22, r18
    1392:	73 0b       	sbc	r23, r19
    1394:	84 0b       	sbc	r24, r20
    1396:	ba f0       	brmi	.+46     	; 0x13c6 <__addsf3x+0x98>
    1398:	91 50       	subi	r25, 0x01	; 1
    139a:	a1 f0       	breq	.+40     	; 0x13c4 <__addsf3x+0x96>
    139c:	ff 0f       	add	r31, r31
    139e:	bb 1f       	adc	r27, r27
    13a0:	66 1f       	adc	r22, r22
    13a2:	77 1f       	adc	r23, r23
    13a4:	88 1f       	adc	r24, r24
    13a6:	c2 f7       	brpl	.-16     	; 0x1398 <__addsf3x+0x6a>
    13a8:	0e c0       	rjmp	.+28     	; 0x13c6 <__addsf3x+0x98>
    13aa:	ba 0f       	add	r27, r26
    13ac:	62 1f       	adc	r22, r18
    13ae:	73 1f       	adc	r23, r19
    13b0:	84 1f       	adc	r24, r20
    13b2:	48 f4       	brcc	.+18     	; 0x13c6 <__addsf3x+0x98>
    13b4:	87 95       	ror	r24
    13b6:	77 95       	ror	r23
    13b8:	67 95       	ror	r22
    13ba:	b7 95       	ror	r27
    13bc:	f7 95       	ror	r31
    13be:	9e 3f       	cpi	r25, 0xFE	; 254
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <__addsf3x+0x96>
    13c2:	b3 cf       	rjmp	.-154    	; 0x132a <__addsf3+0x1e>
    13c4:	93 95       	inc	r25
    13c6:	88 0f       	add	r24, r24
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <__addsf3x+0x9e>
    13ca:	99 27       	eor	r25, r25
    13cc:	ee 0f       	add	r30, r30
    13ce:	97 95       	ror	r25
    13d0:	87 95       	ror	r24
    13d2:	08 95       	ret

000013d4 <__cmpsf2>:
    13d4:	d9 d0       	rcall	.+434    	; 0x1588 <__fp_cmp>
    13d6:	08 f4       	brcc	.+2      	; 0x13da <__cmpsf2+0x6>
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	08 95       	ret

000013dc <__divsf3>:
    13dc:	0c d0       	rcall	.+24     	; 0x13f6 <__divsf3x>
    13de:	0f c1       	rjmp	.+542    	; 0x15fe <__fp_round>
    13e0:	07 d1       	rcall	.+526    	; 0x15f0 <__fp_pscB>
    13e2:	40 f0       	brcs	.+16     	; 0x13f4 <__divsf3+0x18>
    13e4:	fe d0       	rcall	.+508    	; 0x15e2 <__fp_pscA>
    13e6:	30 f0       	brcs	.+12     	; 0x13f4 <__divsf3+0x18>
    13e8:	21 f4       	brne	.+8      	; 0x13f2 <__divsf3+0x16>
    13ea:	5f 3f       	cpi	r21, 0xFF	; 255
    13ec:	19 f0       	breq	.+6      	; 0x13f4 <__divsf3+0x18>
    13ee:	f0 c0       	rjmp	.+480    	; 0x15d0 <__fp_inf>
    13f0:	51 11       	cpse	r21, r1
    13f2:	39 c1       	rjmp	.+626    	; 0x1666 <__fp_szero>
    13f4:	f3 c0       	rjmp	.+486    	; 0x15dc <__fp_nan>

000013f6 <__divsf3x>:
    13f6:	14 d1       	rcall	.+552    	; 0x1620 <__fp_split3>
    13f8:	98 f3       	brcs	.-26     	; 0x13e0 <__divsf3+0x4>

000013fa <__divsf3_pse>:
    13fa:	99 23       	and	r25, r25
    13fc:	c9 f3       	breq	.-14     	; 0x13f0 <__divsf3+0x14>
    13fe:	55 23       	and	r21, r21
    1400:	b1 f3       	breq	.-20     	; 0x13ee <__divsf3+0x12>
    1402:	95 1b       	sub	r25, r21
    1404:	55 0b       	sbc	r21, r21
    1406:	bb 27       	eor	r27, r27
    1408:	aa 27       	eor	r26, r26
    140a:	62 17       	cp	r22, r18
    140c:	73 07       	cpc	r23, r19
    140e:	84 07       	cpc	r24, r20
    1410:	38 f0       	brcs	.+14     	; 0x1420 <__divsf3_pse+0x26>
    1412:	9f 5f       	subi	r25, 0xFF	; 255
    1414:	5f 4f       	sbci	r21, 0xFF	; 255
    1416:	22 0f       	add	r18, r18
    1418:	33 1f       	adc	r19, r19
    141a:	44 1f       	adc	r20, r20
    141c:	aa 1f       	adc	r26, r26
    141e:	a9 f3       	breq	.-22     	; 0x140a <__divsf3_pse+0x10>
    1420:	33 d0       	rcall	.+102    	; 0x1488 <__divsf3_pse+0x8e>
    1422:	0e 2e       	mov	r0, r30
    1424:	3a f0       	brmi	.+14     	; 0x1434 <__divsf3_pse+0x3a>
    1426:	e0 e8       	ldi	r30, 0x80	; 128
    1428:	30 d0       	rcall	.+96     	; 0x148a <__divsf3_pse+0x90>
    142a:	91 50       	subi	r25, 0x01	; 1
    142c:	50 40       	sbci	r21, 0x00	; 0
    142e:	e6 95       	lsr	r30
    1430:	00 1c       	adc	r0, r0
    1432:	ca f7       	brpl	.-14     	; 0x1426 <__divsf3_pse+0x2c>
    1434:	29 d0       	rcall	.+82     	; 0x1488 <__divsf3_pse+0x8e>
    1436:	fe 2f       	mov	r31, r30
    1438:	27 d0       	rcall	.+78     	; 0x1488 <__divsf3_pse+0x8e>
    143a:	66 0f       	add	r22, r22
    143c:	77 1f       	adc	r23, r23
    143e:	88 1f       	adc	r24, r24
    1440:	bb 1f       	adc	r27, r27
    1442:	26 17       	cp	r18, r22
    1444:	37 07       	cpc	r19, r23
    1446:	48 07       	cpc	r20, r24
    1448:	ab 07       	cpc	r26, r27
    144a:	b0 e8       	ldi	r27, 0x80	; 128
    144c:	09 f0       	breq	.+2      	; 0x1450 <__divsf3_pse+0x56>
    144e:	bb 0b       	sbc	r27, r27
    1450:	80 2d       	mov	r24, r0
    1452:	bf 01       	movw	r22, r30
    1454:	ff 27       	eor	r31, r31
    1456:	93 58       	subi	r25, 0x83	; 131
    1458:	5f 4f       	sbci	r21, 0xFF	; 255
    145a:	2a f0       	brmi	.+10     	; 0x1466 <__divsf3_pse+0x6c>
    145c:	9e 3f       	cpi	r25, 0xFE	; 254
    145e:	51 05       	cpc	r21, r1
    1460:	68 f0       	brcs	.+26     	; 0x147c <__divsf3_pse+0x82>
    1462:	b6 c0       	rjmp	.+364    	; 0x15d0 <__fp_inf>
    1464:	00 c1       	rjmp	.+512    	; 0x1666 <__fp_szero>
    1466:	5f 3f       	cpi	r21, 0xFF	; 255
    1468:	ec f3       	brlt	.-6      	; 0x1464 <__divsf3_pse+0x6a>
    146a:	98 3e       	cpi	r25, 0xE8	; 232
    146c:	dc f3       	brlt	.-10     	; 0x1464 <__divsf3_pse+0x6a>
    146e:	86 95       	lsr	r24
    1470:	77 95       	ror	r23
    1472:	67 95       	ror	r22
    1474:	b7 95       	ror	r27
    1476:	f7 95       	ror	r31
    1478:	9f 5f       	subi	r25, 0xFF	; 255
    147a:	c9 f7       	brne	.-14     	; 0x146e <__divsf3_pse+0x74>
    147c:	88 0f       	add	r24, r24
    147e:	91 1d       	adc	r25, r1
    1480:	96 95       	lsr	r25
    1482:	87 95       	ror	r24
    1484:	97 f9       	bld	r25, 7
    1486:	08 95       	ret
    1488:	e1 e0       	ldi	r30, 0x01	; 1
    148a:	66 0f       	add	r22, r22
    148c:	77 1f       	adc	r23, r23
    148e:	88 1f       	adc	r24, r24
    1490:	bb 1f       	adc	r27, r27
    1492:	62 17       	cp	r22, r18
    1494:	73 07       	cpc	r23, r19
    1496:	84 07       	cpc	r24, r20
    1498:	ba 07       	cpc	r27, r26
    149a:	20 f0       	brcs	.+8      	; 0x14a4 <__divsf3_pse+0xaa>
    149c:	62 1b       	sub	r22, r18
    149e:	73 0b       	sbc	r23, r19
    14a0:	84 0b       	sbc	r24, r20
    14a2:	ba 0b       	sbc	r27, r26
    14a4:	ee 1f       	adc	r30, r30
    14a6:	88 f7       	brcc	.-30     	; 0x148a <__divsf3_pse+0x90>
    14a8:	e0 95       	com	r30
    14aa:	08 95       	ret

000014ac <__fixsfsi>:
    14ac:	04 d0       	rcall	.+8      	; 0x14b6 <__fixunssfsi>
    14ae:	68 94       	set
    14b0:	b1 11       	cpse	r27, r1
    14b2:	d9 c0       	rjmp	.+434    	; 0x1666 <__fp_szero>
    14b4:	08 95       	ret

000014b6 <__fixunssfsi>:
    14b6:	bc d0       	rcall	.+376    	; 0x1630 <__fp_splitA>
    14b8:	88 f0       	brcs	.+34     	; 0x14dc <__fixunssfsi+0x26>
    14ba:	9f 57       	subi	r25, 0x7F	; 127
    14bc:	90 f0       	brcs	.+36     	; 0x14e2 <__fixunssfsi+0x2c>
    14be:	b9 2f       	mov	r27, r25
    14c0:	99 27       	eor	r25, r25
    14c2:	b7 51       	subi	r27, 0x17	; 23
    14c4:	a0 f0       	brcs	.+40     	; 0x14ee <__fixunssfsi+0x38>
    14c6:	d1 f0       	breq	.+52     	; 0x14fc <__fixunssfsi+0x46>
    14c8:	66 0f       	add	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	88 1f       	adc	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	1a f0       	brmi	.+6      	; 0x14d8 <__fixunssfsi+0x22>
    14d2:	ba 95       	dec	r27
    14d4:	c9 f7       	brne	.-14     	; 0x14c8 <__fixunssfsi+0x12>
    14d6:	12 c0       	rjmp	.+36     	; 0x14fc <__fixunssfsi+0x46>
    14d8:	b1 30       	cpi	r27, 0x01	; 1
    14da:	81 f0       	breq	.+32     	; 0x14fc <__fixunssfsi+0x46>
    14dc:	c3 d0       	rcall	.+390    	; 0x1664 <__fp_zero>
    14de:	b1 e0       	ldi	r27, 0x01	; 1
    14e0:	08 95       	ret
    14e2:	c0 c0       	rjmp	.+384    	; 0x1664 <__fp_zero>
    14e4:	67 2f       	mov	r22, r23
    14e6:	78 2f       	mov	r23, r24
    14e8:	88 27       	eor	r24, r24
    14ea:	b8 5f       	subi	r27, 0xF8	; 248
    14ec:	39 f0       	breq	.+14     	; 0x14fc <__fixunssfsi+0x46>
    14ee:	b9 3f       	cpi	r27, 0xF9	; 249
    14f0:	cc f3       	brlt	.-14     	; 0x14e4 <__fixunssfsi+0x2e>
    14f2:	86 95       	lsr	r24
    14f4:	77 95       	ror	r23
    14f6:	67 95       	ror	r22
    14f8:	b3 95       	inc	r27
    14fa:	d9 f7       	brne	.-10     	; 0x14f2 <__fixunssfsi+0x3c>
    14fc:	3e f4       	brtc	.+14     	; 0x150c <__fixunssfsi+0x56>
    14fe:	90 95       	com	r25
    1500:	80 95       	com	r24
    1502:	70 95       	com	r23
    1504:	61 95       	neg	r22
    1506:	7f 4f       	sbci	r23, 0xFF	; 255
    1508:	8f 4f       	sbci	r24, 0xFF	; 255
    150a:	9f 4f       	sbci	r25, 0xFF	; 255
    150c:	08 95       	ret

0000150e <__floatunsisf>:
    150e:	e8 94       	clt
    1510:	09 c0       	rjmp	.+18     	; 0x1524 <__floatsisf+0x12>

00001512 <__floatsisf>:
    1512:	97 fb       	bst	r25, 7
    1514:	3e f4       	brtc	.+14     	; 0x1524 <__floatsisf+0x12>
    1516:	90 95       	com	r25
    1518:	80 95       	com	r24
    151a:	70 95       	com	r23
    151c:	61 95       	neg	r22
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	8f 4f       	sbci	r24, 0xFF	; 255
    1522:	9f 4f       	sbci	r25, 0xFF	; 255
    1524:	99 23       	and	r25, r25
    1526:	a9 f0       	breq	.+42     	; 0x1552 <__floatsisf+0x40>
    1528:	f9 2f       	mov	r31, r25
    152a:	96 e9       	ldi	r25, 0x96	; 150
    152c:	bb 27       	eor	r27, r27
    152e:	93 95       	inc	r25
    1530:	f6 95       	lsr	r31
    1532:	87 95       	ror	r24
    1534:	77 95       	ror	r23
    1536:	67 95       	ror	r22
    1538:	b7 95       	ror	r27
    153a:	f1 11       	cpse	r31, r1
    153c:	f8 cf       	rjmp	.-16     	; 0x152e <__floatsisf+0x1c>
    153e:	fa f4       	brpl	.+62     	; 0x157e <__floatsisf+0x6c>
    1540:	bb 0f       	add	r27, r27
    1542:	11 f4       	brne	.+4      	; 0x1548 <__floatsisf+0x36>
    1544:	60 ff       	sbrs	r22, 0
    1546:	1b c0       	rjmp	.+54     	; 0x157e <__floatsisf+0x6c>
    1548:	6f 5f       	subi	r22, 0xFF	; 255
    154a:	7f 4f       	sbci	r23, 0xFF	; 255
    154c:	8f 4f       	sbci	r24, 0xFF	; 255
    154e:	9f 4f       	sbci	r25, 0xFF	; 255
    1550:	16 c0       	rjmp	.+44     	; 0x157e <__floatsisf+0x6c>
    1552:	88 23       	and	r24, r24
    1554:	11 f0       	breq	.+4      	; 0x155a <__floatsisf+0x48>
    1556:	96 e9       	ldi	r25, 0x96	; 150
    1558:	11 c0       	rjmp	.+34     	; 0x157c <__floatsisf+0x6a>
    155a:	77 23       	and	r23, r23
    155c:	21 f0       	breq	.+8      	; 0x1566 <__floatsisf+0x54>
    155e:	9e e8       	ldi	r25, 0x8E	; 142
    1560:	87 2f       	mov	r24, r23
    1562:	76 2f       	mov	r23, r22
    1564:	05 c0       	rjmp	.+10     	; 0x1570 <__floatsisf+0x5e>
    1566:	66 23       	and	r22, r22
    1568:	71 f0       	breq	.+28     	; 0x1586 <__floatsisf+0x74>
    156a:	96 e8       	ldi	r25, 0x86	; 134
    156c:	86 2f       	mov	r24, r22
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	2a f0       	brmi	.+10     	; 0x157e <__floatsisf+0x6c>
    1574:	9a 95       	dec	r25
    1576:	66 0f       	add	r22, r22
    1578:	77 1f       	adc	r23, r23
    157a:	88 1f       	adc	r24, r24
    157c:	da f7       	brpl	.-10     	; 0x1574 <__floatsisf+0x62>
    157e:	88 0f       	add	r24, r24
    1580:	96 95       	lsr	r25
    1582:	87 95       	ror	r24
    1584:	97 f9       	bld	r25, 7
    1586:	08 95       	ret

00001588 <__fp_cmp>:
    1588:	99 0f       	add	r25, r25
    158a:	00 08       	sbc	r0, r0
    158c:	55 0f       	add	r21, r21
    158e:	aa 0b       	sbc	r26, r26
    1590:	e0 e8       	ldi	r30, 0x80	; 128
    1592:	fe ef       	ldi	r31, 0xFE	; 254
    1594:	16 16       	cp	r1, r22
    1596:	17 06       	cpc	r1, r23
    1598:	e8 07       	cpc	r30, r24
    159a:	f9 07       	cpc	r31, r25
    159c:	c0 f0       	brcs	.+48     	; 0x15ce <__fp_cmp+0x46>
    159e:	12 16       	cp	r1, r18
    15a0:	13 06       	cpc	r1, r19
    15a2:	e4 07       	cpc	r30, r20
    15a4:	f5 07       	cpc	r31, r21
    15a6:	98 f0       	brcs	.+38     	; 0x15ce <__fp_cmp+0x46>
    15a8:	62 1b       	sub	r22, r18
    15aa:	73 0b       	sbc	r23, r19
    15ac:	84 0b       	sbc	r24, r20
    15ae:	95 0b       	sbc	r25, r21
    15b0:	39 f4       	brne	.+14     	; 0x15c0 <__fp_cmp+0x38>
    15b2:	0a 26       	eor	r0, r26
    15b4:	61 f0       	breq	.+24     	; 0x15ce <__fp_cmp+0x46>
    15b6:	23 2b       	or	r18, r19
    15b8:	24 2b       	or	r18, r20
    15ba:	25 2b       	or	r18, r21
    15bc:	21 f4       	brne	.+8      	; 0x15c6 <__fp_cmp+0x3e>
    15be:	08 95       	ret
    15c0:	0a 26       	eor	r0, r26
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <__fp_cmp+0x3e>
    15c4:	a1 40       	sbci	r26, 0x01	; 1
    15c6:	a6 95       	lsr	r26
    15c8:	8f ef       	ldi	r24, 0xFF	; 255
    15ca:	81 1d       	adc	r24, r1
    15cc:	81 1d       	adc	r24, r1
    15ce:	08 95       	ret

000015d0 <__fp_inf>:
    15d0:	97 f9       	bld	r25, 7
    15d2:	9f 67       	ori	r25, 0x7F	; 127
    15d4:	80 e8       	ldi	r24, 0x80	; 128
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	08 95       	ret

000015dc <__fp_nan>:
    15dc:	9f ef       	ldi	r25, 0xFF	; 255
    15de:	80 ec       	ldi	r24, 0xC0	; 192
    15e0:	08 95       	ret

000015e2 <__fp_pscA>:
    15e2:	00 24       	eor	r0, r0
    15e4:	0a 94       	dec	r0
    15e6:	16 16       	cp	r1, r22
    15e8:	17 06       	cpc	r1, r23
    15ea:	18 06       	cpc	r1, r24
    15ec:	09 06       	cpc	r0, r25
    15ee:	08 95       	ret

000015f0 <__fp_pscB>:
    15f0:	00 24       	eor	r0, r0
    15f2:	0a 94       	dec	r0
    15f4:	12 16       	cp	r1, r18
    15f6:	13 06       	cpc	r1, r19
    15f8:	14 06       	cpc	r1, r20
    15fa:	05 06       	cpc	r0, r21
    15fc:	08 95       	ret

000015fe <__fp_round>:
    15fe:	09 2e       	mov	r0, r25
    1600:	03 94       	inc	r0
    1602:	00 0c       	add	r0, r0
    1604:	11 f4       	brne	.+4      	; 0x160a <__fp_round+0xc>
    1606:	88 23       	and	r24, r24
    1608:	52 f0       	brmi	.+20     	; 0x161e <__fp_round+0x20>
    160a:	bb 0f       	add	r27, r27
    160c:	40 f4       	brcc	.+16     	; 0x161e <__fp_round+0x20>
    160e:	bf 2b       	or	r27, r31
    1610:	11 f4       	brne	.+4      	; 0x1616 <__fp_round+0x18>
    1612:	60 ff       	sbrs	r22, 0
    1614:	04 c0       	rjmp	.+8      	; 0x161e <__fp_round+0x20>
    1616:	6f 5f       	subi	r22, 0xFF	; 255
    1618:	7f 4f       	sbci	r23, 0xFF	; 255
    161a:	8f 4f       	sbci	r24, 0xFF	; 255
    161c:	9f 4f       	sbci	r25, 0xFF	; 255
    161e:	08 95       	ret

00001620 <__fp_split3>:
    1620:	57 fd       	sbrc	r21, 7
    1622:	90 58       	subi	r25, 0x80	; 128
    1624:	44 0f       	add	r20, r20
    1626:	55 1f       	adc	r21, r21
    1628:	59 f0       	breq	.+22     	; 0x1640 <__fp_splitA+0x10>
    162a:	5f 3f       	cpi	r21, 0xFF	; 255
    162c:	71 f0       	breq	.+28     	; 0x164a <__fp_splitA+0x1a>
    162e:	47 95       	ror	r20

00001630 <__fp_splitA>:
    1630:	88 0f       	add	r24, r24
    1632:	97 fb       	bst	r25, 7
    1634:	99 1f       	adc	r25, r25
    1636:	61 f0       	breq	.+24     	; 0x1650 <__fp_splitA+0x20>
    1638:	9f 3f       	cpi	r25, 0xFF	; 255
    163a:	79 f0       	breq	.+30     	; 0x165a <__fp_splitA+0x2a>
    163c:	87 95       	ror	r24
    163e:	08 95       	ret
    1640:	12 16       	cp	r1, r18
    1642:	13 06       	cpc	r1, r19
    1644:	14 06       	cpc	r1, r20
    1646:	55 1f       	adc	r21, r21
    1648:	f2 cf       	rjmp	.-28     	; 0x162e <__fp_split3+0xe>
    164a:	46 95       	lsr	r20
    164c:	f1 df       	rcall	.-30     	; 0x1630 <__fp_splitA>
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <__fp_splitA+0x30>
    1650:	16 16       	cp	r1, r22
    1652:	17 06       	cpc	r1, r23
    1654:	18 06       	cpc	r1, r24
    1656:	99 1f       	adc	r25, r25
    1658:	f1 cf       	rjmp	.-30     	; 0x163c <__fp_splitA+0xc>
    165a:	86 95       	lsr	r24
    165c:	71 05       	cpc	r23, r1
    165e:	61 05       	cpc	r22, r1
    1660:	08 94       	sec
    1662:	08 95       	ret

00001664 <__fp_zero>:
    1664:	e8 94       	clt

00001666 <__fp_szero>:
    1666:	bb 27       	eor	r27, r27
    1668:	66 27       	eor	r22, r22
    166a:	77 27       	eor	r23, r23
    166c:	cb 01       	movw	r24, r22
    166e:	97 f9       	bld	r25, 7
    1670:	08 95       	ret

00001672 <__gesf2>:
    1672:	8a df       	rcall	.-236    	; 0x1588 <__fp_cmp>
    1674:	08 f4       	brcc	.+2      	; 0x1678 <__gesf2+0x6>
    1676:	8f ef       	ldi	r24, 0xFF	; 255
    1678:	08 95       	ret

0000167a <__mulsf3>:
    167a:	0b d0       	rcall	.+22     	; 0x1692 <__mulsf3x>
    167c:	c0 cf       	rjmp	.-128    	; 0x15fe <__fp_round>
    167e:	b1 df       	rcall	.-158    	; 0x15e2 <__fp_pscA>
    1680:	28 f0       	brcs	.+10     	; 0x168c <__mulsf3+0x12>
    1682:	b6 df       	rcall	.-148    	; 0x15f0 <__fp_pscB>
    1684:	18 f0       	brcs	.+6      	; 0x168c <__mulsf3+0x12>
    1686:	95 23       	and	r25, r21
    1688:	09 f0       	breq	.+2      	; 0x168c <__mulsf3+0x12>
    168a:	a2 cf       	rjmp	.-188    	; 0x15d0 <__fp_inf>
    168c:	a7 cf       	rjmp	.-178    	; 0x15dc <__fp_nan>
    168e:	11 24       	eor	r1, r1
    1690:	ea cf       	rjmp	.-44     	; 0x1666 <__fp_szero>

00001692 <__mulsf3x>:
    1692:	c6 df       	rcall	.-116    	; 0x1620 <__fp_split3>
    1694:	a0 f3       	brcs	.-24     	; 0x167e <__mulsf3+0x4>

00001696 <__mulsf3_pse>:
    1696:	95 9f       	mul	r25, r21
    1698:	d1 f3       	breq	.-12     	; 0x168e <__mulsf3+0x14>
    169a:	95 0f       	add	r25, r21
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	55 1f       	adc	r21, r21
    16a0:	62 9f       	mul	r22, r18
    16a2:	f0 01       	movw	r30, r0
    16a4:	72 9f       	mul	r23, r18
    16a6:	bb 27       	eor	r27, r27
    16a8:	f0 0d       	add	r31, r0
    16aa:	b1 1d       	adc	r27, r1
    16ac:	63 9f       	mul	r22, r19
    16ae:	aa 27       	eor	r26, r26
    16b0:	f0 0d       	add	r31, r0
    16b2:	b1 1d       	adc	r27, r1
    16b4:	aa 1f       	adc	r26, r26
    16b6:	64 9f       	mul	r22, r20
    16b8:	66 27       	eor	r22, r22
    16ba:	b0 0d       	add	r27, r0
    16bc:	a1 1d       	adc	r26, r1
    16be:	66 1f       	adc	r22, r22
    16c0:	82 9f       	mul	r24, r18
    16c2:	22 27       	eor	r18, r18
    16c4:	b0 0d       	add	r27, r0
    16c6:	a1 1d       	adc	r26, r1
    16c8:	62 1f       	adc	r22, r18
    16ca:	73 9f       	mul	r23, r19
    16cc:	b0 0d       	add	r27, r0
    16ce:	a1 1d       	adc	r26, r1
    16d0:	62 1f       	adc	r22, r18
    16d2:	83 9f       	mul	r24, r19
    16d4:	a0 0d       	add	r26, r0
    16d6:	61 1d       	adc	r22, r1
    16d8:	22 1f       	adc	r18, r18
    16da:	74 9f       	mul	r23, r20
    16dc:	33 27       	eor	r19, r19
    16de:	a0 0d       	add	r26, r0
    16e0:	61 1d       	adc	r22, r1
    16e2:	23 1f       	adc	r18, r19
    16e4:	84 9f       	mul	r24, r20
    16e6:	60 0d       	add	r22, r0
    16e8:	21 1d       	adc	r18, r1
    16ea:	82 2f       	mov	r24, r18
    16ec:	76 2f       	mov	r23, r22
    16ee:	6a 2f       	mov	r22, r26
    16f0:	11 24       	eor	r1, r1
    16f2:	9f 57       	subi	r25, 0x7F	; 127
    16f4:	50 40       	sbci	r21, 0x00	; 0
    16f6:	8a f0       	brmi	.+34     	; 0x171a <__mulsf3_pse+0x84>
    16f8:	e1 f0       	breq	.+56     	; 0x1732 <__mulsf3_pse+0x9c>
    16fa:	88 23       	and	r24, r24
    16fc:	4a f0       	brmi	.+18     	; 0x1710 <__mulsf3_pse+0x7a>
    16fe:	ee 0f       	add	r30, r30
    1700:	ff 1f       	adc	r31, r31
    1702:	bb 1f       	adc	r27, r27
    1704:	66 1f       	adc	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	91 50       	subi	r25, 0x01	; 1
    170c:	50 40       	sbci	r21, 0x00	; 0
    170e:	a9 f7       	brne	.-22     	; 0x16fa <__mulsf3_pse+0x64>
    1710:	9e 3f       	cpi	r25, 0xFE	; 254
    1712:	51 05       	cpc	r21, r1
    1714:	70 f0       	brcs	.+28     	; 0x1732 <__mulsf3_pse+0x9c>
    1716:	5c cf       	rjmp	.-328    	; 0x15d0 <__fp_inf>
    1718:	a6 cf       	rjmp	.-180    	; 0x1666 <__fp_szero>
    171a:	5f 3f       	cpi	r21, 0xFF	; 255
    171c:	ec f3       	brlt	.-6      	; 0x1718 <__mulsf3_pse+0x82>
    171e:	98 3e       	cpi	r25, 0xE8	; 232
    1720:	dc f3       	brlt	.-10     	; 0x1718 <__mulsf3_pse+0x82>
    1722:	86 95       	lsr	r24
    1724:	77 95       	ror	r23
    1726:	67 95       	ror	r22
    1728:	b7 95       	ror	r27
    172a:	f7 95       	ror	r31
    172c:	e7 95       	ror	r30
    172e:	9f 5f       	subi	r25, 0xFF	; 255
    1730:	c1 f7       	brne	.-16     	; 0x1722 <__mulsf3_pse+0x8c>
    1732:	fe 2b       	or	r31, r30
    1734:	88 0f       	add	r24, r24
    1736:	91 1d       	adc	r25, r1
    1738:	96 95       	lsr	r25
    173a:	87 95       	ror	r24
    173c:	97 f9       	bld	r25, 7
    173e:	08 95       	ret
    1740:	11 f4       	brne	.+4      	; 0x1746 <__mulsf3_pse+0xb0>
    1742:	0e f4       	brtc	.+2      	; 0x1746 <__mulsf3_pse+0xb0>
    1744:	4b cf       	rjmp	.-362    	; 0x15dc <__fp_nan>
    1746:	3e c0       	rjmp	.+124    	; 0x17c4 <__fp_mpack>

00001748 <sqrt>:
    1748:	73 df       	rcall	.-282    	; 0x1630 <__fp_splitA>
    174a:	d0 f3       	brcs	.-12     	; 0x1740 <__mulsf3_pse+0xaa>
    174c:	99 23       	and	r25, r25
    174e:	d9 f3       	breq	.-10     	; 0x1746 <__mulsf3_pse+0xb0>
    1750:	ce f3       	brts	.-14     	; 0x1744 <__mulsf3_pse+0xae>
    1752:	9f 57       	subi	r25, 0x7F	; 127
    1754:	55 0b       	sbc	r21, r21
    1756:	87 ff       	sbrs	r24, 7
    1758:	43 d0       	rcall	.+134    	; 0x17e0 <__fp_norm2>
    175a:	00 24       	eor	r0, r0
    175c:	a0 e6       	ldi	r26, 0x60	; 96
    175e:	40 ea       	ldi	r20, 0xA0	; 160
    1760:	90 01       	movw	r18, r0
    1762:	80 58       	subi	r24, 0x80	; 128
    1764:	56 95       	lsr	r21
    1766:	97 95       	ror	r25
    1768:	28 f4       	brcc	.+10     	; 0x1774 <sqrt+0x2c>
    176a:	80 5c       	subi	r24, 0xC0	; 192
    176c:	66 0f       	add	r22, r22
    176e:	77 1f       	adc	r23, r23
    1770:	88 1f       	adc	r24, r24
    1772:	20 f0       	brcs	.+8      	; 0x177c <sqrt+0x34>
    1774:	26 17       	cp	r18, r22
    1776:	37 07       	cpc	r19, r23
    1778:	48 07       	cpc	r20, r24
    177a:	30 f4       	brcc	.+12     	; 0x1788 <sqrt+0x40>
    177c:	62 1b       	sub	r22, r18
    177e:	73 0b       	sbc	r23, r19
    1780:	84 0b       	sbc	r24, r20
    1782:	20 29       	or	r18, r0
    1784:	31 29       	or	r19, r1
    1786:	4a 2b       	or	r20, r26
    1788:	a6 95       	lsr	r26
    178a:	17 94       	ror	r1
    178c:	07 94       	ror	r0
    178e:	20 25       	eor	r18, r0
    1790:	31 25       	eor	r19, r1
    1792:	4a 27       	eor	r20, r26
    1794:	58 f7       	brcc	.-42     	; 0x176c <sqrt+0x24>
    1796:	66 0f       	add	r22, r22
    1798:	77 1f       	adc	r23, r23
    179a:	88 1f       	adc	r24, r24
    179c:	20 f0       	brcs	.+8      	; 0x17a6 <sqrt+0x5e>
    179e:	26 17       	cp	r18, r22
    17a0:	37 07       	cpc	r19, r23
    17a2:	48 07       	cpc	r20, r24
    17a4:	30 f4       	brcc	.+12     	; 0x17b2 <sqrt+0x6a>
    17a6:	62 0b       	sbc	r22, r18
    17a8:	73 0b       	sbc	r23, r19
    17aa:	84 0b       	sbc	r24, r20
    17ac:	20 0d       	add	r18, r0
    17ae:	31 1d       	adc	r19, r1
    17b0:	41 1d       	adc	r20, r1
    17b2:	a0 95       	com	r26
    17b4:	81 f7       	brne	.-32     	; 0x1796 <sqrt+0x4e>
    17b6:	b9 01       	movw	r22, r18
    17b8:	84 2f       	mov	r24, r20
    17ba:	91 58       	subi	r25, 0x81	; 129
    17bc:	88 0f       	add	r24, r24
    17be:	96 95       	lsr	r25
    17c0:	87 95       	ror	r24
    17c2:	08 95       	ret

000017c4 <__fp_mpack>:
    17c4:	9f 3f       	cpi	r25, 0xFF	; 255
    17c6:	31 f0       	breq	.+12     	; 0x17d4 <__fp_mpack_finite+0xc>

000017c8 <__fp_mpack_finite>:
    17c8:	91 50       	subi	r25, 0x01	; 1
    17ca:	20 f4       	brcc	.+8      	; 0x17d4 <__fp_mpack_finite+0xc>
    17cc:	87 95       	ror	r24
    17ce:	77 95       	ror	r23
    17d0:	67 95       	ror	r22
    17d2:	b7 95       	ror	r27
    17d4:	88 0f       	add	r24, r24
    17d6:	91 1d       	adc	r25, r1
    17d8:	96 95       	lsr	r25
    17da:	87 95       	ror	r24
    17dc:	97 f9       	bld	r25, 7
    17de:	08 95       	ret

000017e0 <__fp_norm2>:
    17e0:	91 50       	subi	r25, 0x01	; 1
    17e2:	50 40       	sbci	r21, 0x00	; 0
    17e4:	66 0f       	add	r22, r22
    17e6:	77 1f       	adc	r23, r23
    17e8:	88 1f       	adc	r24, r24
    17ea:	d2 f7       	brpl	.-12     	; 0x17e0 <__fp_norm2>
    17ec:	08 95       	ret

000017ee <__divmodsi4>:
    17ee:	97 fb       	bst	r25, 7
    17f0:	09 2e       	mov	r0, r25
    17f2:	05 26       	eor	r0, r21
    17f4:	0e d0       	rcall	.+28     	; 0x1812 <__divmodsi4_neg1>
    17f6:	57 fd       	sbrc	r21, 7
    17f8:	04 d0       	rcall	.+8      	; 0x1802 <__divmodsi4_neg2>
    17fa:	4b d0       	rcall	.+150    	; 0x1892 <__udivmodsi4>
    17fc:	0a d0       	rcall	.+20     	; 0x1812 <__divmodsi4_neg1>
    17fe:	00 1c       	adc	r0, r0
    1800:	38 f4       	brcc	.+14     	; 0x1810 <__divmodsi4_exit>

00001802 <__divmodsi4_neg2>:
    1802:	50 95       	com	r21
    1804:	40 95       	com	r20
    1806:	30 95       	com	r19
    1808:	21 95       	neg	r18
    180a:	3f 4f       	sbci	r19, 0xFF	; 255
    180c:	4f 4f       	sbci	r20, 0xFF	; 255
    180e:	5f 4f       	sbci	r21, 0xFF	; 255

00001810 <__divmodsi4_exit>:
    1810:	08 95       	ret

00001812 <__divmodsi4_neg1>:
    1812:	f6 f7       	brtc	.-4      	; 0x1810 <__divmodsi4_exit>
    1814:	90 95       	com	r25
    1816:	80 95       	com	r24
    1818:	70 95       	com	r23
    181a:	61 95       	neg	r22
    181c:	7f 4f       	sbci	r23, 0xFF	; 255
    181e:	8f 4f       	sbci	r24, 0xFF	; 255
    1820:	9f 4f       	sbci	r25, 0xFF	; 255
    1822:	08 95       	ret

00001824 <__prologue_saves__>:
    1824:	2f 92       	push	r2
    1826:	3f 92       	push	r3
    1828:	4f 92       	push	r4
    182a:	5f 92       	push	r5
    182c:	6f 92       	push	r6
    182e:	7f 92       	push	r7
    1830:	8f 92       	push	r8
    1832:	9f 92       	push	r9
    1834:	af 92       	push	r10
    1836:	bf 92       	push	r11
    1838:	cf 92       	push	r12
    183a:	df 92       	push	r13
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	ca 1b       	sub	r28, r26
    184e:	db 0b       	sbc	r29, r27
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	09 94       	ijmp

0000185c <__epilogue_restores__>:
    185c:	2a 88       	ldd	r2, Y+18	; 0x12
    185e:	39 88       	ldd	r3, Y+17	; 0x11
    1860:	48 88       	ldd	r4, Y+16	; 0x10
    1862:	5f 84       	ldd	r5, Y+15	; 0x0f
    1864:	6e 84       	ldd	r6, Y+14	; 0x0e
    1866:	7d 84       	ldd	r7, Y+13	; 0x0d
    1868:	8c 84       	ldd	r8, Y+12	; 0x0c
    186a:	9b 84       	ldd	r9, Y+11	; 0x0b
    186c:	aa 84       	ldd	r10, Y+10	; 0x0a
    186e:	b9 84       	ldd	r11, Y+9	; 0x09
    1870:	c8 84       	ldd	r12, Y+8	; 0x08
    1872:	df 80       	ldd	r13, Y+7	; 0x07
    1874:	ee 80       	ldd	r14, Y+6	; 0x06
    1876:	fd 80       	ldd	r15, Y+5	; 0x05
    1878:	0c 81       	ldd	r16, Y+4	; 0x04
    187a:	1b 81       	ldd	r17, Y+3	; 0x03
    187c:	aa 81       	ldd	r26, Y+2	; 0x02
    187e:	b9 81       	ldd	r27, Y+1	; 0x01
    1880:	ce 0f       	add	r28, r30
    1882:	d1 1d       	adc	r29, r1
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	ed 01       	movw	r28, r26
    1890:	08 95       	ret

00001892 <__udivmodsi4>:
    1892:	a1 e2       	ldi	r26, 0x21	; 33
    1894:	1a 2e       	mov	r1, r26
    1896:	aa 1b       	sub	r26, r26
    1898:	bb 1b       	sub	r27, r27
    189a:	fd 01       	movw	r30, r26
    189c:	0d c0       	rjmp	.+26     	; 0x18b8 <__udivmodsi4_ep>

0000189e <__udivmodsi4_loop>:
    189e:	aa 1f       	adc	r26, r26
    18a0:	bb 1f       	adc	r27, r27
    18a2:	ee 1f       	adc	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	a2 17       	cp	r26, r18
    18a8:	b3 07       	cpc	r27, r19
    18aa:	e4 07       	cpc	r30, r20
    18ac:	f5 07       	cpc	r31, r21
    18ae:	20 f0       	brcs	.+8      	; 0x18b8 <__udivmodsi4_ep>
    18b0:	a2 1b       	sub	r26, r18
    18b2:	b3 0b       	sbc	r27, r19
    18b4:	e4 0b       	sbc	r30, r20
    18b6:	f5 0b       	sbc	r31, r21

000018b8 <__udivmodsi4_ep>:
    18b8:	66 1f       	adc	r22, r22
    18ba:	77 1f       	adc	r23, r23
    18bc:	88 1f       	adc	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	1a 94       	dec	r1
    18c2:	69 f7       	brne	.-38     	; 0x189e <__udivmodsi4_loop>
    18c4:	60 95       	com	r22
    18c6:	70 95       	com	r23
    18c8:	80 95       	com	r24
    18ca:	90 95       	com	r25
    18cc:	9b 01       	movw	r18, r22
    18ce:	ac 01       	movw	r20, r24
    18d0:	bd 01       	movw	r22, r26
    18d2:	cf 01       	movw	r24, r30
    18d4:	08 95       	ret

000018d6 <__ftoa_engine>:
    18d6:	28 30       	cpi	r18, 0x08	; 8
    18d8:	08 f0       	brcs	.+2      	; 0x18dc <__ftoa_engine+0x6>
    18da:	27 e0       	ldi	r18, 0x07	; 7
    18dc:	33 27       	eor	r19, r19
    18de:	da 01       	movw	r26, r20
    18e0:	99 0f       	add	r25, r25
    18e2:	31 1d       	adc	r19, r1
    18e4:	87 fd       	sbrc	r24, 7
    18e6:	91 60       	ori	r25, 0x01	; 1
    18e8:	00 96       	adiw	r24, 0x00	; 0
    18ea:	61 05       	cpc	r22, r1
    18ec:	71 05       	cpc	r23, r1
    18ee:	39 f4       	brne	.+14     	; 0x18fe <__ftoa_engine+0x28>
    18f0:	32 60       	ori	r19, 0x02	; 2
    18f2:	2e 5f       	subi	r18, 0xFE	; 254
    18f4:	3d 93       	st	X+, r19
    18f6:	30 e3       	ldi	r19, 0x30	; 48
    18f8:	2a 95       	dec	r18
    18fa:	e1 f7       	brne	.-8      	; 0x18f4 <__ftoa_engine+0x1e>
    18fc:	08 95       	ret
    18fe:	9f 3f       	cpi	r25, 0xFF	; 255
    1900:	30 f0       	brcs	.+12     	; 0x190e <__ftoa_engine+0x38>
    1902:	80 38       	cpi	r24, 0x80	; 128
    1904:	71 05       	cpc	r23, r1
    1906:	61 05       	cpc	r22, r1
    1908:	09 f0       	breq	.+2      	; 0x190c <__ftoa_engine+0x36>
    190a:	3c 5f       	subi	r19, 0xFC	; 252
    190c:	3c 5f       	subi	r19, 0xFC	; 252
    190e:	3d 93       	st	X+, r19
    1910:	91 30       	cpi	r25, 0x01	; 1
    1912:	08 f0       	brcs	.+2      	; 0x1916 <__ftoa_engine+0x40>
    1914:	80 68       	ori	r24, 0x80	; 128
    1916:	91 1d       	adc	r25, r1
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	1f 93       	push	r17
    191e:	0f 93       	push	r16
    1920:	ff 92       	push	r15
    1922:	ef 92       	push	r14
    1924:	19 2f       	mov	r17, r25
    1926:	98 7f       	andi	r25, 0xF8	; 248
    1928:	96 95       	lsr	r25
    192a:	e9 2f       	mov	r30, r25
    192c:	96 95       	lsr	r25
    192e:	96 95       	lsr	r25
    1930:	e9 0f       	add	r30, r25
    1932:	ff 27       	eor	r31, r31
    1934:	e6 53       	subi	r30, 0x36	; 54
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	99 27       	eor	r25, r25
    193a:	33 27       	eor	r19, r19
    193c:	ee 24       	eor	r14, r14
    193e:	ff 24       	eor	r15, r15
    1940:	a7 01       	movw	r20, r14
    1942:	e7 01       	movw	r28, r14
    1944:	05 90       	lpm	r0, Z+
    1946:	08 94       	sec
    1948:	07 94       	ror	r0
    194a:	28 f4       	brcc	.+10     	; 0x1956 <__ftoa_engine+0x80>
    194c:	36 0f       	add	r19, r22
    194e:	e7 1e       	adc	r14, r23
    1950:	f8 1e       	adc	r15, r24
    1952:	49 1f       	adc	r20, r25
    1954:	51 1d       	adc	r21, r1
    1956:	66 0f       	add	r22, r22
    1958:	77 1f       	adc	r23, r23
    195a:	88 1f       	adc	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	06 94       	lsr	r0
    1960:	a1 f7       	brne	.-24     	; 0x194a <__ftoa_engine+0x74>
    1962:	05 90       	lpm	r0, Z+
    1964:	07 94       	ror	r0
    1966:	28 f4       	brcc	.+10     	; 0x1972 <__ftoa_engine+0x9c>
    1968:	e7 0e       	add	r14, r23
    196a:	f8 1e       	adc	r15, r24
    196c:	49 1f       	adc	r20, r25
    196e:	56 1f       	adc	r21, r22
    1970:	c1 1d       	adc	r28, r1
    1972:	77 0f       	add	r23, r23
    1974:	88 1f       	adc	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	66 1f       	adc	r22, r22
    197a:	06 94       	lsr	r0
    197c:	a1 f7       	brne	.-24     	; 0x1966 <__ftoa_engine+0x90>
    197e:	05 90       	lpm	r0, Z+
    1980:	07 94       	ror	r0
    1982:	28 f4       	brcc	.+10     	; 0x198e <__ftoa_engine+0xb8>
    1984:	f8 0e       	add	r15, r24
    1986:	49 1f       	adc	r20, r25
    1988:	56 1f       	adc	r21, r22
    198a:	c7 1f       	adc	r28, r23
    198c:	d1 1d       	adc	r29, r1
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	66 1f       	adc	r22, r22
    1994:	77 1f       	adc	r23, r23
    1996:	06 94       	lsr	r0
    1998:	a1 f7       	brne	.-24     	; 0x1982 <__ftoa_engine+0xac>
    199a:	05 90       	lpm	r0, Z+
    199c:	07 94       	ror	r0
    199e:	20 f4       	brcc	.+8      	; 0x19a8 <__ftoa_engine+0xd2>
    19a0:	49 0f       	add	r20, r25
    19a2:	56 1f       	adc	r21, r22
    19a4:	c7 1f       	adc	r28, r23
    19a6:	d8 1f       	adc	r29, r24
    19a8:	99 0f       	add	r25, r25
    19aa:	66 1f       	adc	r22, r22
    19ac:	77 1f       	adc	r23, r23
    19ae:	88 1f       	adc	r24, r24
    19b0:	06 94       	lsr	r0
    19b2:	a9 f7       	brne	.-22     	; 0x199e <__ftoa_engine+0xc8>
    19b4:	84 91       	lpm	r24, Z+
    19b6:	10 95       	com	r17
    19b8:	17 70       	andi	r17, 0x07	; 7
    19ba:	41 f0       	breq	.+16     	; 0x19cc <__ftoa_engine+0xf6>
    19bc:	d6 95       	lsr	r29
    19be:	c7 95       	ror	r28
    19c0:	57 95       	ror	r21
    19c2:	47 95       	ror	r20
    19c4:	f7 94       	ror	r15
    19c6:	e7 94       	ror	r14
    19c8:	1a 95       	dec	r17
    19ca:	c1 f7       	brne	.-16     	; 0x19bc <__ftoa_engine+0xe6>
    19cc:	e0 e7       	ldi	r30, 0x70	; 112
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	68 94       	set
    19d2:	15 90       	lpm	r1, Z+
    19d4:	15 91       	lpm	r17, Z+
    19d6:	35 91       	lpm	r19, Z+
    19d8:	65 91       	lpm	r22, Z+
    19da:	95 91       	lpm	r25, Z+
    19dc:	05 90       	lpm	r0, Z+
    19de:	7f e2       	ldi	r23, 0x2F	; 47
    19e0:	73 95       	inc	r23
    19e2:	e1 18       	sub	r14, r1
    19e4:	f1 0a       	sbc	r15, r17
    19e6:	43 0b       	sbc	r20, r19
    19e8:	56 0b       	sbc	r21, r22
    19ea:	c9 0b       	sbc	r28, r25
    19ec:	d0 09       	sbc	r29, r0
    19ee:	c0 f7       	brcc	.-16     	; 0x19e0 <__ftoa_engine+0x10a>
    19f0:	e1 0c       	add	r14, r1
    19f2:	f1 1e       	adc	r15, r17
    19f4:	43 1f       	adc	r20, r19
    19f6:	56 1f       	adc	r21, r22
    19f8:	c9 1f       	adc	r28, r25
    19fa:	d0 1d       	adc	r29, r0
    19fc:	7e f4       	brtc	.+30     	; 0x1a1c <__ftoa_engine+0x146>
    19fe:	70 33       	cpi	r23, 0x30	; 48
    1a00:	11 f4       	brne	.+4      	; 0x1a06 <__ftoa_engine+0x130>
    1a02:	8a 95       	dec	r24
    1a04:	e6 cf       	rjmp	.-52     	; 0x19d2 <__ftoa_engine+0xfc>
    1a06:	e8 94       	clt
    1a08:	01 50       	subi	r16, 0x01	; 1
    1a0a:	30 f0       	brcs	.+12     	; 0x1a18 <__ftoa_engine+0x142>
    1a0c:	08 0f       	add	r16, r24
    1a0e:	0a f4       	brpl	.+2      	; 0x1a12 <__ftoa_engine+0x13c>
    1a10:	00 27       	eor	r16, r16
    1a12:	02 17       	cp	r16, r18
    1a14:	08 f4       	brcc	.+2      	; 0x1a18 <__ftoa_engine+0x142>
    1a16:	20 2f       	mov	r18, r16
    1a18:	23 95       	inc	r18
    1a1a:	02 2f       	mov	r16, r18
    1a1c:	7a 33       	cpi	r23, 0x3A	; 58
    1a1e:	28 f0       	brcs	.+10     	; 0x1a2a <__ftoa_engine+0x154>
    1a20:	79 e3       	ldi	r23, 0x39	; 57
    1a22:	7d 93       	st	X+, r23
    1a24:	2a 95       	dec	r18
    1a26:	e9 f7       	brne	.-6      	; 0x1a22 <__ftoa_engine+0x14c>
    1a28:	10 c0       	rjmp	.+32     	; 0x1a4a <__ftoa_engine+0x174>
    1a2a:	7d 93       	st	X+, r23
    1a2c:	2a 95       	dec	r18
    1a2e:	89 f6       	brne	.-94     	; 0x19d2 <__ftoa_engine+0xfc>
    1a30:	06 94       	lsr	r0
    1a32:	97 95       	ror	r25
    1a34:	67 95       	ror	r22
    1a36:	37 95       	ror	r19
    1a38:	17 95       	ror	r17
    1a3a:	17 94       	ror	r1
    1a3c:	e1 18       	sub	r14, r1
    1a3e:	f1 0a       	sbc	r15, r17
    1a40:	43 0b       	sbc	r20, r19
    1a42:	56 0b       	sbc	r21, r22
    1a44:	c9 0b       	sbc	r28, r25
    1a46:	d0 09       	sbc	r29, r0
    1a48:	98 f0       	brcs	.+38     	; 0x1a70 <__ftoa_engine+0x19a>
    1a4a:	23 95       	inc	r18
    1a4c:	7e 91       	ld	r23, -X
    1a4e:	73 95       	inc	r23
    1a50:	7a 33       	cpi	r23, 0x3A	; 58
    1a52:	08 f0       	brcs	.+2      	; 0x1a56 <__ftoa_engine+0x180>
    1a54:	70 e3       	ldi	r23, 0x30	; 48
    1a56:	7c 93       	st	X, r23
    1a58:	20 13       	cpse	r18, r16
    1a5a:	b8 f7       	brcc	.-18     	; 0x1a4a <__ftoa_engine+0x174>
    1a5c:	7e 91       	ld	r23, -X
    1a5e:	70 61       	ori	r23, 0x10	; 16
    1a60:	7d 93       	st	X+, r23
    1a62:	30 f0       	brcs	.+12     	; 0x1a70 <__ftoa_engine+0x19a>
    1a64:	83 95       	inc	r24
    1a66:	71 e3       	ldi	r23, 0x31	; 49
    1a68:	7d 93       	st	X+, r23
    1a6a:	70 e3       	ldi	r23, 0x30	; 48
    1a6c:	2a 95       	dec	r18
    1a6e:	e1 f7       	brne	.-8      	; 0x1a68 <__ftoa_engine+0x192>
    1a70:	11 24       	eor	r1, r1
    1a72:	ef 90       	pop	r14
    1a74:	ff 90       	pop	r15
    1a76:	0f 91       	pop	r16
    1a78:	1f 91       	pop	r17
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	99 27       	eor	r25, r25
    1a80:	87 fd       	sbrc	r24, 7
    1a82:	90 95       	com	r25
    1a84:	08 95       	ret

00001a86 <strnlen_P>:
    1a86:	fc 01       	movw	r30, r24
    1a88:	05 90       	lpm	r0, Z+
    1a8a:	61 50       	subi	r22, 0x01	; 1
    1a8c:	70 40       	sbci	r23, 0x00	; 0
    1a8e:	01 10       	cpse	r0, r1
    1a90:	d8 f7       	brcc	.-10     	; 0x1a88 <strnlen_P+0x2>
    1a92:	80 95       	com	r24
    1a94:	90 95       	com	r25
    1a96:	8e 0f       	add	r24, r30
    1a98:	9f 1f       	adc	r25, r31
    1a9a:	08 95       	ret

00001a9c <strnlen>:
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	61 50       	subi	r22, 0x01	; 1
    1aa0:	70 40       	sbci	r23, 0x00	; 0
    1aa2:	01 90       	ld	r0, Z+
    1aa4:	01 10       	cpse	r0, r1
    1aa6:	d8 f7       	brcc	.-10     	; 0x1a9e <strnlen+0x2>
    1aa8:	80 95       	com	r24
    1aaa:	90 95       	com	r25
    1aac:	8e 0f       	add	r24, r30
    1aae:	9f 1f       	adc	r25, r31
    1ab0:	08 95       	ret

00001ab2 <fputc>:
    1ab2:	0f 93       	push	r16
    1ab4:	1f 93       	push	r17
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	8c 01       	movw	r16, r24
    1abc:	eb 01       	movw	r28, r22
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	81 ff       	sbrs	r24, 1
    1ac2:	1b c0       	rjmp	.+54     	; 0x1afa <fputc+0x48>
    1ac4:	82 ff       	sbrs	r24, 2
    1ac6:	0d c0       	rjmp	.+26     	; 0x1ae2 <fputc+0x30>
    1ac8:	2e 81       	ldd	r18, Y+6	; 0x06
    1aca:	3f 81       	ldd	r19, Y+7	; 0x07
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad0:	28 17       	cp	r18, r24
    1ad2:	39 07       	cpc	r19, r25
    1ad4:	64 f4       	brge	.+24     	; 0x1aee <fputc+0x3c>
    1ad6:	e8 81       	ld	r30, Y
    1ad8:	f9 81       	ldd	r31, Y+1	; 0x01
    1ada:	01 93       	st	Z+, r16
    1adc:	f9 83       	std	Y+1, r31	; 0x01
    1ade:	e8 83       	st	Y, r30
    1ae0:	06 c0       	rjmp	.+12     	; 0x1aee <fputc+0x3c>
    1ae2:	e8 85       	ldd	r30, Y+8	; 0x08
    1ae4:	f9 85       	ldd	r31, Y+9	; 0x09
    1ae6:	80 2f       	mov	r24, r16
    1ae8:	09 95       	icall
    1aea:	89 2b       	or	r24, r25
    1aec:	31 f4       	brne	.+12     	; 0x1afa <fputc+0x48>
    1aee:	8e 81       	ldd	r24, Y+6	; 0x06
    1af0:	9f 81       	ldd	r25, Y+7	; 0x07
    1af2:	01 96       	adiw	r24, 0x01	; 1
    1af4:	9f 83       	std	Y+7, r25	; 0x07
    1af6:	8e 83       	std	Y+6, r24	; 0x06
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <fputc+0x4c>
    1afa:	0f ef       	ldi	r16, 0xFF	; 255
    1afc:	1f ef       	ldi	r17, 0xFF	; 255
    1afe:	c8 01       	movw	r24, r16
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	08 95       	ret

00001b0a <sprintf>:
    1b0a:	ae e0       	ldi	r26, 0x0E	; 14
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	eb e8       	ldi	r30, 0x8B	; 139
    1b10:	fd e0       	ldi	r31, 0x0D	; 13
    1b12:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__prologue_saves__+0x1c>
    1b16:	0d 89       	ldd	r16, Y+21	; 0x15
    1b18:	1e 89       	ldd	r17, Y+22	; 0x16
    1b1a:	86 e0       	ldi	r24, 0x06	; 6
    1b1c:	8c 83       	std	Y+4, r24	; 0x04
    1b1e:	1a 83       	std	Y+2, r17	; 0x02
    1b20:	09 83       	std	Y+1, r16	; 0x01
    1b22:	8f ef       	ldi	r24, 0xFF	; 255
    1b24:	9f e7       	ldi	r25, 0x7F	; 127
    1b26:	9e 83       	std	Y+6, r25	; 0x06
    1b28:	8d 83       	std	Y+5, r24	; 0x05
    1b2a:	9e 01       	movw	r18, r28
    1b2c:	27 5e       	subi	r18, 0xE7	; 231
    1b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b30:	ce 01       	movw	r24, r28
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	6f 89       	ldd	r22, Y+23	; 0x17
    1b36:	78 8d       	ldd	r23, Y+24	; 0x18
    1b38:	a9 01       	movw	r20, r18
    1b3a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <vfprintf>
    1b3e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b40:	38 85       	ldd	r19, Y+8	; 0x08
    1b42:	02 0f       	add	r16, r18
    1b44:	13 1f       	adc	r17, r19
    1b46:	f8 01       	movw	r30, r16
    1b48:	10 82       	st	Z, r1
    1b4a:	2e 96       	adiw	r28, 0x0e	; 14
    1b4c:	e4 e0       	ldi	r30, 0x04	; 4
    1b4e:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <__epilogue_restores__+0x1c>

00001b52 <__ultoa_invert>:
    1b52:	fa 01       	movw	r30, r20
    1b54:	aa 27       	eor	r26, r26
    1b56:	28 30       	cpi	r18, 0x08	; 8
    1b58:	51 f1       	breq	.+84     	; 0x1bae <__ultoa_invert+0x5c>
    1b5a:	20 31       	cpi	r18, 0x10	; 16
    1b5c:	81 f1       	breq	.+96     	; 0x1bbe <__ultoa_invert+0x6c>
    1b5e:	e8 94       	clt
    1b60:	6f 93       	push	r22
    1b62:	6e 7f       	andi	r22, 0xFE	; 254
    1b64:	6e 5f       	subi	r22, 0xFE	; 254
    1b66:	7f 4f       	sbci	r23, 0xFF	; 255
    1b68:	8f 4f       	sbci	r24, 0xFF	; 255
    1b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6c:	af 4f       	sbci	r26, 0xFF	; 255
    1b6e:	b1 e0       	ldi	r27, 0x01	; 1
    1b70:	3e d0       	rcall	.+124    	; 0x1bee <__ultoa_invert+0x9c>
    1b72:	b4 e0       	ldi	r27, 0x04	; 4
    1b74:	3c d0       	rcall	.+120    	; 0x1bee <__ultoa_invert+0x9c>
    1b76:	67 0f       	add	r22, r23
    1b78:	78 1f       	adc	r23, r24
    1b7a:	89 1f       	adc	r24, r25
    1b7c:	9a 1f       	adc	r25, r26
    1b7e:	a1 1d       	adc	r26, r1
    1b80:	68 0f       	add	r22, r24
    1b82:	79 1f       	adc	r23, r25
    1b84:	8a 1f       	adc	r24, r26
    1b86:	91 1d       	adc	r25, r1
    1b88:	a1 1d       	adc	r26, r1
    1b8a:	6a 0f       	add	r22, r26
    1b8c:	71 1d       	adc	r23, r1
    1b8e:	81 1d       	adc	r24, r1
    1b90:	91 1d       	adc	r25, r1
    1b92:	a1 1d       	adc	r26, r1
    1b94:	20 d0       	rcall	.+64     	; 0x1bd6 <__ultoa_invert+0x84>
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <__ultoa_invert+0x48>
    1b98:	68 94       	set
    1b9a:	3f 91       	pop	r19
    1b9c:	2a e0       	ldi	r18, 0x0A	; 10
    1b9e:	26 9f       	mul	r18, r22
    1ba0:	11 24       	eor	r1, r1
    1ba2:	30 19       	sub	r19, r0
    1ba4:	30 5d       	subi	r19, 0xD0	; 208
    1ba6:	31 93       	st	Z+, r19
    1ba8:	de f6       	brtc	.-74     	; 0x1b60 <__ultoa_invert+0xe>
    1baa:	cf 01       	movw	r24, r30
    1bac:	08 95       	ret
    1bae:	46 2f       	mov	r20, r22
    1bb0:	47 70       	andi	r20, 0x07	; 7
    1bb2:	40 5d       	subi	r20, 0xD0	; 208
    1bb4:	41 93       	st	Z+, r20
    1bb6:	b3 e0       	ldi	r27, 0x03	; 3
    1bb8:	0f d0       	rcall	.+30     	; 0x1bd8 <__ultoa_invert+0x86>
    1bba:	c9 f7       	brne	.-14     	; 0x1bae <__ultoa_invert+0x5c>
    1bbc:	f6 cf       	rjmp	.-20     	; 0x1baa <__ultoa_invert+0x58>
    1bbe:	46 2f       	mov	r20, r22
    1bc0:	4f 70       	andi	r20, 0x0F	; 15
    1bc2:	40 5d       	subi	r20, 0xD0	; 208
    1bc4:	4a 33       	cpi	r20, 0x3A	; 58
    1bc6:	18 f0       	brcs	.+6      	; 0x1bce <__ultoa_invert+0x7c>
    1bc8:	49 5d       	subi	r20, 0xD9	; 217
    1bca:	31 fd       	sbrc	r19, 1
    1bcc:	40 52       	subi	r20, 0x20	; 32
    1bce:	41 93       	st	Z+, r20
    1bd0:	02 d0       	rcall	.+4      	; 0x1bd6 <__ultoa_invert+0x84>
    1bd2:	a9 f7       	brne	.-22     	; 0x1bbe <__ultoa_invert+0x6c>
    1bd4:	ea cf       	rjmp	.-44     	; 0x1baa <__ultoa_invert+0x58>
    1bd6:	b4 e0       	ldi	r27, 0x04	; 4
    1bd8:	a6 95       	lsr	r26
    1bda:	97 95       	ror	r25
    1bdc:	87 95       	ror	r24
    1bde:	77 95       	ror	r23
    1be0:	67 95       	ror	r22
    1be2:	ba 95       	dec	r27
    1be4:	c9 f7       	brne	.-14     	; 0x1bd8 <__ultoa_invert+0x86>
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	61 05       	cpc	r22, r1
    1bea:	71 05       	cpc	r23, r1
    1bec:	08 95       	ret
    1bee:	9b 01       	movw	r18, r22
    1bf0:	ac 01       	movw	r20, r24
    1bf2:	0a 2e       	mov	r0, r26
    1bf4:	06 94       	lsr	r0
    1bf6:	57 95       	ror	r21
    1bf8:	47 95       	ror	r20
    1bfa:	37 95       	ror	r19
    1bfc:	27 95       	ror	r18
    1bfe:	ba 95       	dec	r27
    1c00:	c9 f7       	brne	.-14     	; 0x1bf4 <__ultoa_invert+0xa2>
    1c02:	62 0f       	add	r22, r18
    1c04:	73 1f       	adc	r23, r19
    1c06:	84 1f       	adc	r24, r20
    1c08:	95 1f       	adc	r25, r21
    1c0a:	a0 1d       	adc	r26, r0
    1c0c:	08 95       	ret

00001c0e <_exit>:
    1c0e:	f8 94       	cli

00001c10 <__stop_program>:
    1c10:	ff cf       	rjmp	.-2      	; 0x1c10 <__stop_program>
